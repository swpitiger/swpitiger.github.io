<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网上优秀资源笔记]]></title>
    <url>%2F2019%2F04%2F16%2F%E7%BD%91%E4%B8%8A%E4%BC%98%E7%A7%80%E8%B5%84%E6%BA%90%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[优秀博客 博客或网站名称 资源 备注 廖雪峰 JavaScript教程 Python教程 Git教程 浏览器插件 Chrome Firefox Hoxx VPN Proxy Hoxx VPN Proxy VPN代理 Adblock Plus Adblock Plus 广告拦截 图标图片素材 网站图标生成 Favicon Generator 上传图片生成多平台网站图标 在线图片处理 压缩图 在线图标编辑 iconfinder 在线抠图工具 online.photoscissors.com www.remove.bg 在线photoshop www.photopea.com 在线图片工具 onlinejpgtools.com]]></content>
      <categories>
        <category>网络资源</category>
      </categories>
      <tags>
        <tag>链接</tag>
        <tag>资源</tag>
        <tag>收录</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[化学表达式示例]]></title>
    <url>%2F2019%2F04%2F16%2F%E5%8C%96%E5%AD%A6%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[MathJax.Ajax.config.path["mhchem"] = "https://cdnjs.cloudflare.com/ajax/libs/mathjax-mhchem/3.3.2"; MathJax.Hub.Config({ TeX: { extensions: ["[mhchem]/mhchem.js"] } }); mhchem for MathJax mhchem for KaTeX mhchem is a tool for writing beautiful chemical equations easily. This is the manual for mhchem’s input syntax. It covers version 3.3 of both, mhchem for MathJax (a third-party extension for MathJax) and mhchem for KaTeX (a third-party extension for KaTeX). configuration of mathjax For information on how to make the \ce command available, see the official MathJax docs. In short, use this config to load the extension: 1234567MathJax.Ajax.config.path[&quot;mhchem&quot;] = &quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax-mhchem/3.3.2&quot;;MathJax.Hub.Config(&#123; TeX: &#123; extensions: [&quot;[mhchem]/mhchem.js&quot;] &#125;&#125;); configuration of katex For information on how to make the \ce command available, see the KaTeX docs. Just write this line into your pages’s &lt;head&gt;, after the call to katex.js: 1&lt;script src=&quot;https://cdn.jsdelivr.net/npm/katex@0.10.0/dist/contrib/mhchem.min.js&quot;&gt;&lt;/script&gt; chemical equations (ce) \(\ce{CO2 + C -&gt; 2 CO}​\) 1$\ce&#123;CO2 + C -&gt; 2 CO&#125; $ \(\ce{CO2+C-&gt;2CO}\) $ $ 1$\ce&#123;Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^&#123;II&#125;I4]^2-&#125; $ $C_p[] = $ 1$C_p[\ce&#123;H2O(l)&#125;] = \pu&#123;75.3 J // mol K&#125; $ chemical formulae $ $ 1$\ce&#123;H2O&#125; $ $ $ 1$\ce&#123;Sb2O3&#125; $ charges \(\ce{H+}​\) 1$\ce&#123;H+&#125; $ $ $ 1$\ce&#123;CrO4^2-&#125; $ $ $ 1$\ce&#123;[AgCl2]-&#125; $ $ $ 1$\ce&#123;Y^99+&#125; $ \(\ce{Y^{99+} }​\) 1$\ce&#123;Y^&#123;99+&#125; &#125; $ stoichiometric numbers $ $ 1$\ce&#123;2 H2O&#125; $ $ $ 1$\ce&#123;2H2O&#125; $ $ $ 1$\ce&#123;0.5 H2O&#125; $ $ $ 1$\ce&#123;1/2 H2O&#125; $ \(\ce{(1/2) H2O}​\) 1$\ce&#123;(1/2) H2O&#125; $ IUPAC Green Book $ $ 1$\ce&#123; $n$ H2O&#125; $ isotopes $ $ 1$\ce&#123;^&#123;227&#125;_&#123;90&#125;Th+&#125; $ $ $ 1$\ce&#123;^227_90Th+&#125; $ $ $ 1$\ce&#123;^&#123;0&#125;_&#123;-1&#125;n^&#123;-&#125; &#125; $ $ $ 1$\ce&#123;^0_-1n-&#125; $ It might be ambiguous whether a superscript belongs to the left or right element. There is automatic detection (digits only = mass number = belongs to right side), but to make sure you can type {} as a separator. $ $ 1$\ce&#123;H&#123;&#125;^3HO&#125; $ $ $ 1$\ce&#123;H^3HO&#125; $ reaction arrows $ $ 1$\ce&#123;A -&gt; B&#125; $ $ $ 1$\ce&#123;A &lt;- B&#125; $ $ $ 1$\ce&#123;A &lt;-&gt; B&#125; $ not to be used according to IUPAC and ACS $ $ 1$\ce&#123;A &lt;--&gt; B&#125; $ $ $ 1$\ce&#123;A &lt;=&gt; B&#125; $ $ $ 1$\ce&#123;A &lt;=&gt;&gt; B&#125; $ $ $ 1$\ce&#123;A &lt;&lt;=&gt; B&#125; $ Each arrow can take two optional arguments: one for above and one for below. The arrow arguments use the same input syntax as the \ce command. $ $ 1$\ce&#123;A -&gt;[H2O] B&#125; $ chemistry $ $ 1$\ce&#123;A -&gt;[&#123;text above&#125;][&#123;text below&#125;] B&#125; $ upright text, see below \(\ce{A -&gt;[\)x\(][\)x_i$] B} $ 1$\ce&#123;A -&gt;[$x$][$x_i$] B&#125; $ italic math, see below Unfortunately, MathJax cannot stretch &lt;--&gt;, &lt;=&gt;, &lt;=&gt;&gt; and &lt;&lt;=&gt; arrows properly. All the arrows do stretch in LaTeX and KaTeX. parentheses, brackets, braces Use parentheses ( ) and brackets [ ] normally. Write braces as \{ \}. $ $ 1$\ce&#123;(NH4)2S&#125; $ $ $ 1$\ce&#123;[\&#123;(X2)3\&#125;2]^3+&#125; $ For large parentheses, \left and \right macros need to be in the same math environment, so you might have to put \ce into $ into \ce, but that’s fine. $ $ 1$\ce&#123;CH4 + 2 $\left( \ce&#123;O2 + 79/21 N2&#125; \right)$ &#125; $ states of aggregation(not fully supported for latex yet) $ $ 1$\ce&#123;H2(aq)&#125; $ IUPAC recommendation $ $ 1$\ce&#123;CO3^2-_&#123;(aq)&#125; &#125; $ not IUPAC-conform, not ACS-conform \(\ce{NaOH(aq,\)$)} $ 1$\ce&#123;NaOH(aq,$\infty$)&#125; $ crystal systems(not fully supported for latex yet) \(\ce{ZnS(\)c$)} $ 1$\ce&#123;ZnS($c$)&#125; $ \(\ce{ZnS(\ca\)c$)} $ 1$\ce&#123;ZnS(\ca$c$)&#125; $ Circa, tilde variables like x, n, 2n+1 Typographical conventions say that variables are typeset in an italic font, while other entities (like chemical elements) are typeset in an upright font. mhchem tries to recognize common patterns and use the correct (italic) font, like the x and n in the following examples. $ $ 1$\ce&#123;NO_x&#125; $ $ $ 1$\ce&#123;Fe^n+&#125; $ $ $ 1$\ce&#123;x Na(NH4)HPO4 -&gt;[\Delta] (NaPO3)_x + x NH3 ^ + x H2O&#125; $ If a more complex term is not properly recognized, you can switch to math mode (= italics) explicitly. greek characters Just write \alpha etc. Typographical conventions say that variables are typeset in an italic font, while other entities (like chemical elements) are typeset in an upright font. In the following examples, the Greek character is not a variable that stands for a number, therefore an upright font should be used. Unfortunately, neither MathJax nor KaTeX support upright lower-case Greek characters. $ $ 1$\ce&#123;\mu-Cl&#125; $ $ $ 1$\ce&#123;[Pt(\eta^2-C2H4)Cl3]-&#125; $ Spaces after a greek character are ignored. This is standard TeX behavior. Insert {} to get the desired output. $ $ 1$\ce&#123;\beta +&#125; $ $ $ 1$\ce&#123;^40_18Ar + \gamma&#123;&#125; + \nu_e&#125; $ (italic) math By using $...$ you can escape to math mode. \(\ce{NaOH(aq,\)$)} $ 1$\ce&#123;NaOH(aq,$\infty$)&#125; $ $ $ 1$\ce&#123;Fe(CN)_&#123; $\frac&#123;6&#125;&#123;2&#125; $ &#125; &#125; $ $ $ 1$\ce&#123;X_&#123; $i$ &#125;^&#123; $x$ &#125; &#125; $ \(\ce{X_\)i\(^\)x$ } $ 1$\ce&#123;X_$i$^$x$ &#125; $ (With mhchem for LaTex there is a difference between $...$ and ${...} $ . But because neither MathJax nor KaTeX have a text font, both inputs will yield identical results there.) italic text With the same mechanism you can mimic an italic text font. $ $ 1$\ce&#123; $cis$&#123;-&#125;[PtCl2(NH3)2]&#125; $ \(\ce{CuS(\)hP12$)} $ 1$\ce&#123;CuS($hP12$)&#125; $ Pearson Symbol Spaces will be ignored. Use a ~ when you need to typeset a space. upright text, escape parsing Enclose upright text with {...}. $ $ 1$\ce&#123; &#123;Gluconic Acid&#125; + H2O2&#125; $ $ $ 1$\ce&#123;X_&#123; &#123;red&#125; &#125; &#125; $ With the same mechanism, you can escape parsing, for instance if you need a simple hyphen (that should not become a bond). $ $ 1$\ce&#123; &#123;(+)&#125;_589&#123;-&#125;[Co(en)3]Cl3&#125; $ bonds $ $ 1$\ce&#123;C6H5-CHO&#125; $ $ $ 1$\ce&#123;A-B=C#D&#125; $ mhchem tries to differentiate whether \ce{-} should be a bond, a charge or a hyphen. $ $ 1$\ce&#123;A\bond&#123;-&#125;B\bond&#123;=&#125;C\bond&#123;#&#125;D&#125; $ $ $ 1$\ce&#123;A\bond&#123;1&#125;B\bond&#123;2&#125;C\bond&#123;3&#125;D&#125; $ $ $ 1$\ce&#123;A\bond&#123;~&#125;B\bond&#123;~-&#125;C&#125; $ $ $ 1$\ce&#123;A\bond&#123;~--&#125;B\bond&#123;~=&#125;C\bond&#123;-~-&#125;D&#125; $ $ $ 1$\ce&#123;A\bond&#123;...&#125;B\bond&#123;....&#125;C&#125; $ $ $ 1$\ce&#123;A\bond&#123;-&gt;&#125;B\bond&#123;&lt;-&#125;C&#125; $ addition compounds $ $ 1$\ce&#123;KCr(SO4)2*12H2O&#125; $ $ $ 1$\ce&#123;KCr(SO4)2.12H2O&#125; $ $ $ 1$\ce&#123;KCr(SO4)2 * 12 H2O&#125; $ oxidation states $ $ 1$\ce&#123;Fe^&#123;II&#125;Fe^&#123;III&#125;2O4&#125; $ unpaired electrons, radical dots $ $ 1$\ce&#123;OCO^&#123;.-&#125; &#125; $ $ $ 1$\ce&#123;NO^&#123;(2.)-&#125; &#125; $ kröger-vink notation(not supported for latex yet) $ $ 1$\ce&#123;Li^x_&#123;Li,1-2x&#125;Mg^._&#123;Li,x&#125; $V$&apos;_&#123;Li,x&#125;Cl^x_&#123;Cl&#125; &#125; $ $ $ 1$\ce&#123;O&apos;&apos;_&#123;i,x&#125; &#125; $ $ $ 1$\ce&#123;M^&#123;..&#125;_i&#125; $ $ $ 1$\ce&#123; $V$^&#123;4&apos;&#125;_&#123;Ti&#125; &#125; $ $ $ 1$\ce&#123;V_&#123;V,1&#125;C_&#123;C,0.8&#125; $V$_&#123;C,0.2&#125; &#125; $ upright V = Vanadium, italic V = vacancy equation operators $ $ 1$\ce&#123;A + B&#125; $ $ $ 1$\ce&#123;A - B&#125; $ not to be confused with bonds $ $ 1$\ce&#123;A = B&#125; $ not to be confused with bonds $ $ 1$\ce&#123;A \pm B&#125; $ precipitate and gas $ $ 1$\ce&#123;SO4^2- + Ba^2+ -&gt; BaSO4 v&#125; $ $ $ 1$\ce&#123;A v B (v) -&gt; B ^ B (^)&#125; $ other symbols and shortcuts(not fully supported for latex yet) $ $ 1$\ce&#123;NO^*&#125; $ Excited state $ $ 1$\ce&#123;1s^2-N&#125; $ Orbitals $ $ 1$\ce&#123;n-Pr&#125; $ $ $ 1$\ce&#123;iPr&#125; $ $ $ 1$\ce&#123;\ca Fe&#125; $ $ $ 1$\ce&#123;A, B, C; F&#125; $ Punctuation and othersand others 1$\ce&#123; &#123;and others&#125; &#125; $ complex examples $ $ 1$\ce&#123;Zn^2+ &lt;=&gt;[+ 2OH-][+ 2H+] $\underset&#123;\text&#123;amphoteres Hydroxid&#125; &#125;&#123;\ce&#123;Zn(OH)2 v&#125; &#125; $ &lt;=&gt;[+ 2OH-][+ 2H+] $\underset&#123;\text&#123;Hydroxozikat&#125; &#125;&#123;\ce&#123;[Zn(OH)4]^2-&#125; &#125; $ &#125; $ $ $ 1$\ce&#123; $K = \frac&#123;[\ce&#123;Hg^2+&#125;][\ce&#123;Hg&#125;]&#125;&#123;[\ce&#123;Hg2^2+&#125;]&#125; $ &#125; $ $ $ 1$\ce&#123; $K = \ce&#123;\frac&#123;[Hg^2+][Hg]&#125;&#123;[Hg2^2+]&#125; &#125; $ &#125; $ $ $ 1$\ce&#123;Hg^2+ -&gt;[I-] $\underset&#123;\mathrm&#123;red&#125; &#125;&#123;\ce&#123;HgI2&#125; &#125; $ -&gt;[I-] $\underset&#123;\mathrm&#123;red&#125; &#125;&#123;\ce&#123;[Hg^&#123;II&#125;I4]^2-&#125; &#125; $ &#125; $ physical units (pu)(mathjax or katex only, not for latex) $ $ 1$\pu&#123;123 kJ&#125; $ $ $ 1$\pu&#123;123 mm2&#125; $ There are two conventions regarding the multiplication within units. $ $ 1$\pu&#123;123 J s&#125; $ $ $ 1$\pu&#123;123 J*s&#125; $ There are four conventions regarding divisions. $ $ 1$\pu&#123;123 kJ/mol&#125; $ $ $ 1$\pu&#123;123 kJ//mol&#125; $ $ $ 1$\pu&#123;123 kJ mol-1&#125; $ $ $ 1$\pu&#123;123 kJ*mol-1&#125; $ There are four main conventions for writing numbers in scientific notation. $ $ 1$\pu&#123;1.2e3 kJ&#125; $ $ $ 1$\pu&#123;1,2e3 kJ&#125; $ $ $ 1$\pu&#123;1.2E3 kJ&#125; $ $ $ 1$\pu&#123;1,2E3 kJ&#125; $ If you need more control than is offered here, take a look at the siunitx extension. compatibility with mhchem for latex Most of these examples work identically for mhchem for MathJax, mhchem for KaTeX and mhchem and LaTeX. Exceptions are indicated. Also, some edge-cases may render differently. I will try to minimize the differences in the future. But even then, the MathJax and KaTeX versions will always be more tolerant of sloppy input (e.g. a missing space) than mhchem for LaTeX. contact and support If you have a question and cannot find an answer—neither here nor with a web search—then mail me (mhchem@MartinHensel.de) or create an GitHub issue (https://github.com/mhchem/MathJax-mhchem/issues) or ask at StackExchange (http://meta.chemistry.stackexchange.com/) with the mhchem tag. test drive H2OHX2O]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>示例</tag>
        <tag>mathjax</tag>
        <tag>katax</tag>
        <tag>Hexo</tag>
        <tag>Math</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法图片嵌入示例]]></title>
    <url>%2F2019%2F04%2F16%2FMarkdown%E8%AF%AD%E6%B3%95%E5%9B%BE%E7%89%87%E5%B5%8C%E5%85%A5%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[文章图片处理 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 修改站点配置文件 1post_asset_folder: true # 启动 Asset 文件夹 安装hexo-asset-image插件，支持标准markdown图片插入。 1npm install hexo-asset-image --save 新建文章 1hexo new filename 新建文章时，在创建filename文件的同时，还在/source/posts目录下创建了与filename同名的文件夹，用于存放文章中的图片。 Typora图片插入设置 文件–-&gt;偏好设置—&gt;图片插入 12复制到指定路径./$&#123;filename&#125; 以下为markdown标准语法嵌入的图片 1 俄罗斯白玉 2 俄罗斯碧玉 3 若羌玉 4 且末玉]]></content>
      <categories>
        <category>Hexo</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>插件</tag>
        <tag>示例</tag>
        <tag>next</tag>
        <tag>图片</tag>
        <tag>asset</tag>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>安装</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学化学公式示例]]></title>
    <url>%2F2019%2F04%2F16%2F%E6%95%B0%E5%AD%A6%E5%8C%96%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[Math and Academic Functions August 14, 2018 by typora.io Typora supports rendering normal mathematics using Tex/LaTeX syntax. The rendering process is processed by MathJax. \(\ce{Li^x_{Li,1-2x}Mg^._{Li,x}\)V\(&#39;_{Li,x}Cl^x_{Cl}}\) Table of Contents Math Block (Display Math) Inline Math TeX Commands available in Typora Chemistry Expressions Cross Reference Auto Numbering Troubleshooting Force Refresh Limitations Math Block (Display Math) Math blocks are LaTeX expressions wrapped by $$ mark and line break, for example: 12345678910$$\begin&#123;align*&#125;y = y(x,t) &amp;= A e^&#123;i\theta&#125; \\&amp;= A (\cos \theta + i \sin \theta) \\&amp;= A (\cos(kx - \omega t) + i \sin(kx - \omega t)) \\&amp;= A\cos(kx - \omega t) + i A\sin(kx - \omega t) \\&amp;= A\cos \Big(\frac&#123;2\pi&#125;&#123;\lambda&#125;x - \frac&#123;2\pi v&#125;&#123;\lambda&#125; t \Big) + i A\sin \Big(\frac&#123;2\pi&#125;&#123;\lambda&#125;x - \frac&#123;2\pi v&#125;&#123;\lambda&#125; t \Big) \\&amp;= A\cos \frac&#123;2\pi&#125;&#123;\lambda&#125; (x - v t) + i A\sin \frac&#123;2\pi&#125;&#123;\lambda&#125; (x - v t)\end&#123;align*&#125;$$ will be rendered as \[ \begin{align*} y = y(x,t) &amp;= A e^{i\theta} \\ &amp;= A (\cos \theta + i \sin \theta) \\ &amp;= A (\cos(kx - \omega t) + i \sin(kx - \omega t)) \\ &amp;= A\cos(kx - \omega t) + i A\sin(kx - \omega t) \\ &amp;= A\cos \Big(\frac{2\pi}{\lambda}x - \frac{2\pi v}{\lambda} t \Big) + i A\sin \Big(\frac{2\pi}{\lambda}x - \frac{2\pi v}{\lambda} t \Big) \\ &amp;= A\cos \frac{2\pi}{\lambda} (x - v t) + i A\sin \frac{2\pi}{\lambda} (x - v t) \end{align*} \] \[ \begin{align*} y = y(x,t) &amp;= A e^{i\theta} \\ &amp;= A (\cos \theta + i \sin \theta) \\ &amp;= A (\cos(kx - \omega t) + i \sin(kx - \omega t)) \\ &amp;= A\cos(kx - \omega t) + i A\sin(kx - \omega t) \\ &amp;= A\cos \Big(\frac{2\pi}{\lambda}x - \frac{2\pi v}{\lambda} t \Big) + i A\sin \Big(\frac{2\pi}{\lambda}x - \frac{2\pi v}{\lambda} t \Big) \\ &amp;= A\cos \frac{2\pi}{\lambda} (x - v t) + i A\sin \frac{2\pi}{\lambda} (x - v t) \end{align*} \] Math Blocks You can render LaTeX mathematical expressions using MathJax. To add a mathematical expression, input $$ and press the ‘Return’ key. This will trigger an input field which accepts Tex/LaTex source. For example: \[ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\ \frac{\partial X}{\partial u} &amp; \frac{\partial Y}{\partial u} &amp; 0 \\ \frac{\partial X}{\partial v} &amp; \frac{\partial Y}{\partial v} &amp; 0 \\ \end{vmatrix} \] In the markdown source file, the math block is a LaTeX expression wrapped by a pair of ‘$$’ marks: 1234567$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125;\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$ You can find more details here. In typora, you could just press $$ and Return key to input a math block, in input mode, use Up/Down arrow key or Command/Ctrl + Renturn key to finish editing, or just click the ✓ button, or somewhere else. Inline Math First of all, please enable inline math feature from preferences panels -&gt; Markdown section. Preferences panel can be opened From menu bar: File -&gt; Preferences..., or use shortcut key — command/ctrl + ,. This settings will be applied after Typora restarts. img Inline math use syntax like this $&lt;Math Expressions&gt;$, e.g: \(f = \frac{2 \pi}{T}​\). TeX Commands available in Typora You could find the all supported TeX commands in http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands. You could add new commands using \def or\newcommand. For example: 12345$$\def\bold#1\bold&#123;this\ is\ now\ bold&#125;$$ Chemistry Expressions Typora has the built-in mhchem extension, which can be used to render Chemistry Expressions, you could use like this: 1$\ce&#123;CH4 + 2 $\left( \ce&#123;O2 + 79/21 N2&#125; \right)$&#125;$ $​$ \(\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}\) \(\ce{[\{(X2)3\}2]^3+}\) Which will be rendered as For more details, please refer https://mhchem.github.io/MathJax-mhchem/. Cross Reference Typora supports TeX-style reference syntax, for example: 1234567Here is a labeled equation:$$x+1\over\sqrt&#123;1-x^2&#125;\label&#123;ref1&#125;$$This is a referece : $\ref&#123;ref1&#125;$ Here is a labeled equation: \[ x+1\over\sqrt{1-x^2}\label{ref1} \] This is a referece : \(\ref{ref1}\) Auto Numbering Typora supports auto-numbering math blocks. To turn on this feature, please open preferences panel, and enable “Auto Numbering Math Equations” under “Markdown” section. img Troubleshooting Force Refresh When Math rendering goes wrong, like output math too wild/narrow, or equation numbering becomes incorrect, you can triple force refresh for all math from Edit → Math Tools menu. Limitations MathJax support a limited subsets of all LaTeX commands (references: http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands). Not all export formats supports math, and some commands/features of math/LaTeX would become unavailable after export.]]></content>
      <categories>
        <category>Hexo</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>示例</tag>
        <tag>MaxthJax</tag>
        <tag>Katex</tag>
        <tag>Hexo</tag>
        <tag>Typora</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-filter-mermaid-diagrams]]></title>
    <url>%2F2019%2F04%2F15%2F%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%8F%92%E4%BB%B6%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[HEXO滤波器-美人鱼图 webappdevelp / hexo-filter-mermaid-diagrams 流程图 graph TD; A-->B; A-->C; B-->D; C-->D; 序列图 sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! 甘特图 gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d 类图 classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --|> Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 C2: Cool label]]></content>
      <categories>
        <category>Hexo</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>示例</tag>
        <tag>流程图</tag>
        <tag>甘特图</tag>
        <tag>序列图</tag>
        <tag>类图</tag>
        <tag>Git图</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown文件中嵌入PDF文件示例]]></title>
    <url>%2F2019%2F04%2F15%2FMarkdown%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B5%8C%E5%85%A5PDF%E6%96%87%E4%BB%B6%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[Markdown文件中嵌入PDF文件示例 theme-next-pdf插件 以下嵌入compressed.tracemonkey-pldi-09.pdf文件 PDF.js for NexT Introduce This is a plugin that allows to preview PDF files in the blog pages. It's based on PDFObject and PDF.js. If the browser supports embedded PDFs natively, PDFObject will create a &lt;embed&gt; tag and include the PDF file on your website. Otherwise it will create a &lt;iframe&gt; tag and uses PDF.js to render the pdf file. Follow the guide below to install dependencies. Installation Step 1 → Go to NexT dir Change dir to NexT directory. There must be layout, source, languages and other directories: 123$ cd themes/next$ lsbower.json _config.yml docs gulpfile.coffee languages layout LICENSE.md package.json README.md scripts source test Step 2 → Get module Install module to source/lib directory: 1$ git clone https://github.com/theme-next/theme-next-pdf source/lib/pdf Step 3 → Set it up Enable module in NexT _config.yml file: 1234567891011121314# PDF tag, requires two plugins: pdfObject and pdf.js# pdfObject will try to load pdf files natively, if failed, pdf.js will be used.# The following `cdn` setting is only for pdfObject, because cdn for pdf.js might be blocked by CORS policy.# So, YOU MUST install the dependency of pdf.js if you want to use pdf tag and make it work on all browsers.# See: https://github.com/theme-next/theme-next-pdfpdf: enable: true # Default height height: 500px pdfobject: # Use 2.1.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/pdfobject@2.1.1/pdfobject.min.js # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js Usage In order to embed PDF files in the article, you just need to create an pdf tag with the URL of your local PDF file, e.g. 1&#123;% pdf /path/to/your/file.pdf %&#125; Notice: Do not use cross-origin PDF files, it might be blocked by the CORS policy. Enjoy it! Update 12$ cd themes/next/source/lib/pdf$ git pull]]></content>
      <categories>
        <category>Hexo</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>pdf</tag>
        <tag>插件</tag>
        <tag>示例</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学公式引用示例]]></title>
    <url>%2F2019%2F04%2F15%2F%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E5%BC%95%E7%94%A8%E7%A4%BA%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[数学公式 NexT 内部提供数学公式渲染的引擎，这样你就不需要自己手动在模板中引入 JS 或者 CSS； 只需要将 next/_config.yml 中 math 的 enable 选项改为 true，并选择对应的渲染引擎即可： 1234math: enable: true ... engine: mathjax 需要注意的是，仅仅将 math 的 enable 打开并不能让你看到数学公式，你还需要使用对应的 Hexo 渲染器(Renderer) 才能真正在博客页面中显示出数学公式。引擎对应使用的 Hexo 渲染器会在引擎相关的部分介绍。 提供的渲染引擎 目前，NexT 提供两种数学公式渲染引擎，分别为 MathJax 和 Katex，默认为 MathJax。 MathJax(默认) 如果你选择使用 MathJax 进行数学公式渲染，你需要使用 hexo-renderer-pandoc 或者 hexo-renderer-kramed 这两个渲染器的其中一个。 首先，卸载原有的渲染器 hexo-renderer-marked，并安装这两种渲染器的其中一个： 12npm un hexo-renderer-marked --savenpm i hexo-renderer-pandoc --save # 或者 hexo-renderer-kramed 然后在 next/_config.yml 中将 math 的 enable 打开，并选择 mathjax 作为渲染引擎。 12345math: enable: true ... engine: mathjax #engine: katex 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s 使用 MathJax 给公式编号并引用公式 在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。 为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？你只需要在书写公式的时候给公式一个 \ label{} 标记（tag），然后在正文中，可以使用 \ref{} 或者 \eqref{} 命令来引用对应的公式。使用 \eqref{} 是推荐的方式，因为如果你使用 \ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。 对于简单的公式，使用下面的方式给公式一个标记， 123$$\begin&#123;equation&#125;e=mc^2\end&#123;equation&#125;\label&#123;eq1&#125;$$ \[\begin{equation} e=mc^2 \end{equation}\label{eq1}\] 然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下： 1著名的质能方程 $\eqref&#123;eq1&#125;$ 由爱因斯坦提出 ... \(\eqref{eq1}\) 对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行， 1234567$$\begin&#123;equation&#125;\begin&#123;aligned&#125;a &amp;= b + c \\ &amp;= d + e + f + g \\ &amp;= h + i\end&#123;aligned&#125;\end&#123;equation&#125;\label&#123;eq2&#125;$$ \[ \begin{equation} \begin{aligned} a &amp;= b + c \\ &amp;= d + e + f + g \\ &amp;= h + i \end{aligned} \end{equation}\label{eq2} \] 要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号： 12345$$\begin&#123;align&#125;a &amp;= b + c \label&#123;eq3&#125; \\x &amp;= yz \label&#123;eq4&#125;\\l &amp;= m - n \label&#123;eq5&#125;\end&#123;align&#125;$$ \[ \begin{align} a &amp;= b + c \label{eq3} \\ x &amp;= yz \label{eq4}\\ l &amp;= m - n \label{eq5} \end{align} \] 在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \nonumber 命令即可。例如： 12345$$\begin&#123;align&#125;-4 + 5x &amp;= 2+y \nonumber \\ w+2 &amp;= -1+w \\ ab &amp;= cb\end&#123;align&#125;$$ \[ \begin{align} -4 + 5x &amp;= 2+y \nonumber \\ w+2 &amp;= -1+w \\ ab &amp;= cb \end{align} \] 有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \tag{} 命令来实现，例如： 1$$x+1\over\sqrt&#123;1-x^2&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;$$ \[ x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag} \] 如果你想要了解更多信息，请访问 MathJax 关于公式编号的官方文档。同时，你也可以访问这篇博客 来获取更多细节信息。 Katex Katex 渲染引擎相对于 MathJax 来说大大提高了速度，而且在关掉 JavaScript 时也能渲染数学公式。 但是 Katex 所支持的东西没有 MathJax 全面，你可以从下面的相关链接中获取更多的信息。 如果你选择使用 Katex 进行数学公式渲染，你需要使用 hexo-renderer-markdown-it-plus 或者 hexo-renderer-markdown-it 这两种渲染器的其中一个。 首先，卸载原有的渲染器 hexo-renderer-marked，并安装这两种渲染器的其中一个： 123npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save# 或者 hexo-renderer-markdown-it 然后在 next/_config.yml 中将 math 的 enable 打开，并选择 katex 作为渲染引擎。 12345math: enable: true ... #engine: mathjax engine: katex 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s 如果你使用 hexo-renderer-markdown-it 如果你使用 hexo-renderer-markdown-it，你还需要为其加上 markdown-it-katex 作为插件： 1npm i markdown-it-katex --save 然后在 hexo/_config.yml 中将 markdown-it-katex 作为插件写入 hexo-renderer-markdown-it 的配置中： 12345678910markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-katex 已知的问题 首先请查阅 Katex 的 Common Issue 块级公式(例如 $$...$$)必须位于空行。 即在开头的 $$ 前和在结尾的 $$ 后不能有除了空白字符以外的其他字符。(#32comment) 不支持 Unicode。(#32comment) 行内公式(例如 $...$)在开头的 $ 后面和结尾的 $ 前面不能含有空格。(#32comment) 如果你在文章的各级标题中(例如 ## 标题)使用公式。 那么文章目录中的这个标题会出现 3 次未渲染的公式代码(#32comment) 如果你在文章 Title 中使用公式，那么公式将不会被渲染。(#32comment) 我们目前使用的 Katex 版本为 0.7.1，这里面可能有某些问题是因为 Katex 版本老旧导致的； 但是，就像上面所说的，数学公式的渲染必须依靠渲染器来支持，目前的 Katex 相关的渲染器仅支持到 Katex 0.7.1； 我们会持续关注相关渲染器的更新，如果有渲染器支持更高版本的 Katex，我们会及时更新我们的 Katex 版本。 相关链接 Katex 与 MathJax 渲染速度对比 Katex 支持的功能列表 相关配置说明 注意，在修改配置选项时，不要更改配置的缩进； 目前，NexT 的所有配置都采用2 空格的缩进； 如果配置的内容接在冒号后面，那么内容和冒号之间必须有一个空格(例如enable: true) 1234567891011121314151617181920212223242526# Math Equations Render Supportmath: enable: false # Default(true) will load mathjax/katex script on demand # That is it only render those page who has 'mathjax: true' in Front Matter. # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE. per_page: true engine: mathjax #engine: katex # hexo-rendering-pandoc (or hexo-renderer-kramed) needed to full MathJax support. mathjax: # Use 2.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML # For direct link to MathJax.js with CloudFlare CDN (cdnjs.cloudflare.com). #cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) # needed to full Katex support. katex: # Use 0.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css enable true 或者 false，默认为 false。 true 是打开数学公式渲染，false 则是关闭。 per_page true 或者 false，默认为 true。 这个选项是控制是否在每篇文章都渲染数学公式； 默认(true) 的行为是只对 Front Matter 中含有 mathjax: true 的文章进行数学公式渲染。 如果 Front Matter 中不含有 mathjax: true，或者 mathjax: false，那么 NexT 将不会对这些文章进行数学公式渲染。 例如： 123456&lt;!-- 这篇文章会渲染数学公式 --&gt;---title: 'Will Render Math'mathjax: true---.... 123456&lt;!-- 这篇文章不会渲染数学公式 --&gt;---title: 'Not Render Math'mathjax: false---.... 12345&lt;!-- 这篇文章也不会渲染数学公式 --&gt;---title: 'Not Render Math Either'---.... 当你将它设置为 false 时，它就会在每个页面都加载 MathJax 或者 Katex 来进行数学公式渲染。 cdn MathJax 和 Katex 都提供了 cdn 的配置，如果你不知道什么是 cdn ，请不要修改这个配置。 首先，MathJax 和 Katex 都使用了 jsDelivr 作为默认 CDN； 之所以选择 jsDelivr 是因为它在全球各地都有比较不错的速度，而且具有中国官方颁布的 ICP 证书，在中国也能比较好地访问。 同时，我们也提供了其他的 CDN 备选方案，包括著名的 CDNJS。 对于 MathJax 来说，我们目前采用的版本为 2.7.1。 对于 Katex，由于上面提到的版本问题，我们目前采用的版本为 0.7.1。 如果你想尝试我们提供的备选方案以外的 CDN，请注意使用对应的版本。 特别的，对于中国的博客主，或者您的博客访问大部分来源于中国，由于 CDNJS 在部分中国地区被墙，请不要使用 CDNJS 作为 CDN。]]></content>
      <categories>
        <category>Hexo</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>示例</tag>
        <tag>MaxthJax</tag>
        <tag>Katex</tag>
        <tag>Hexo</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>HTML</tag>
        <tag>Math</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数学公式]]></title>
    <url>%2F2019%2F04%2F15%2FMATH%2F</url>
    <content type="text"><![CDATA[数学公式 NexT 内部提供数学公式渲染的引擎，这样你就不需要自己手动在模板中引入 JS 或者 CSS； 只需要将 next/_config.yml 中 math 的 enable 选项改为 true，并选择对应的渲染引擎即可： 1234math: enable: true ... engine: mathjax 需要注意的是，仅仅将 math 的 enable 打开并不能让你看到数学公式，你还需要使用对应的 Hexo 渲染器(Renderer) 才能真正在博客页面中显示出数学公式。引擎对应使用的 Hexo 渲染器会在引擎相关的部分介绍。 提供的渲染引擎 目前，NexT 提供两种数学公式渲染引擎，分别为 MathJax 和 Katex，默认为 MathJax。 MathJax(默认) 如果你选择使用 MathJax 进行数学公式渲染，你需要使用 hexo-renderer-pandoc 或者 hexo-renderer-kramed 这两个渲染器的其中一个。 首先，卸载原有的渲染器 hexo-renderer-marked，并安装这两种渲染器的其中一个： 12npm un hexo-renderer-marked --savenpm i hexo-renderer-pandoc --save # 或者 hexo-renderer-kramed 然后在 next/_config.yml 中将 math 的 enable 打开，并选择 mathjax 作为渲染引擎。 12345math: enable: true ... engine: mathjax #engine: katex 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s 使用 MathJax 给公式编号并引用公式 在新版本的 NexT 主题中，我们加入了公式自动编号和引用功能。下面简要介绍一下如何使用这项功能。 为了使用这项功能，一般来说，你必须把所使用的 LaTeX 公式放在 equation 环境里面，采用旧的方法（也就是说，仅仅把公式的每一边用两个 $ 符号包含起来）是无效的。如何引用公式？你只需要在书写公式的时候给公式一个 \ label{} 标记（tag），然后在正文中，可以使用 \ref{} 或者 \eqref{} 命令来引用对应的公式。使用 \eqref{} 是推荐的方式，因为如果你使用 \ref{}，公式在文中的引用编号将没有圆括号包围。下面介绍几种常见的公式编号例子。 对于简单的公式，使用下面的方式给公式一个标记， 123$$\begin&#123;equation&#125;e=mc^2\end&#123;equation&#125;\label&#123;eq1&#125;$$ \[\begin{equation} e=mc^2 \end{equation}\label{eq1}​\] 然后，在正文中，你可以轻松引用上述公式，一个简单的例子如下： 1著名的质能方程 $\eqref&#123;eq1&#125;$ 由爱因斯坦提出 ... \(\eqref{eq1}​\) 对于多行公式，在 equation 环境中，你可以使用 aligned 环境把公式分成多行， 1234567$$\begin&#123;equation&#125;\begin&#123;aligned&#125;a &amp;= b + c \\ &amp;= d + e + f + g \\ &amp;= h + i\end&#123;aligned&#125;\end&#123;equation&#125;\label&#123;eq2&#125;$$ \[ \begin{equation} \begin{aligned} a &amp;= b + c \\ &amp;= d + e + f + g \\ &amp;= h + i \end{aligned} \end{equation}\label{eq2} \] 要对齐多个公式，我们需要使用 align 环境。align 环境中的每个公式都有自己的编号： 12345$$\begin&#123;align&#125;a &amp;= b + c \label&#123;eq3&#125; \\x &amp;= yz \label&#123;eq4&#125;\\l &amp;= m - n \label&#123;eq5&#125;\end&#123;align&#125;$$ \[ \begin{align} a &amp;= b + c \label{eq3} \\ x &amp;= yz \label{eq4}\\ l &amp;= m - n \label{eq5} \end{align} \] 在 align 环境中，如果你不想给某个或某几个公式编号，那么在这些公式后面使用 \nonumber 命令即可。例如： 12345$$\begin&#123;align&#125;-4 + 5x &amp;= 2+y \nonumber \\ w+2 &amp;= -1+w \\ ab &amp;= cb\end&#123;align&#125;$$ \[ \begin{align} -4 + 5x &amp;= 2+y \nonumber \\ w+2 &amp;= -1+w \\ ab &amp;= cb \end{align} \] 有时，你可能会希望采用更加奇特的方式来标记和引用你的公式，你可以通过使用 \tag{} 命令来实现，例如： 1$$x+1\over\sqrt&#123;1-x^2&#125; \tag&#123;i&#125;\label&#123;eq_tag&#125;$$ \[ x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag} \] 如果你想要了解更多信息，请访问 MathJax 关于公式编号的官方文档。同时，你也可以访问这篇博客 来获取更多细节信息。 Katex Katex 渲染引擎相对于 MathJax 来说大大提高了速度，而且在关掉 JavaScript 时也能渲染数学公式。 但是 Katex 所支持的东西没有 MathJax 全面，你可以从下面的相关链接中获取更多的信息。 如果你选择使用 Katex 进行数学公式渲染，你需要使用 hexo-renderer-markdown-it-plus 或者 hexo-renderer-markdown-it 这两种渲染器的其中一个。 首先，卸载原有的渲染器 hexo-renderer-marked，并安装这两种渲染器的其中一个： 123npm un hexo-renderer-marked --savenpm i hexo-renderer-markdown-it-plus --save# 或者 hexo-renderer-markdown-it 然后在 next/_config.yml 中将 math 的 enable 打开，并选择 katex 作为渲染引擎。 12345math: enable: true ... #engine: mathjax engine: katex 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s 如果你使用 hexo-renderer-markdown-it 如果你使用 hexo-renderer-markdown-it，你还需要为其加上 markdown-it-katex 作为插件： 1npm i markdown-it-katex --save 然后在 hexo/_config.yml 中将 markdown-it-katex 作为插件写入 hexo-renderer-markdown-it 的配置中： 12345678910markdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-katex 已知的问题 首先请查阅 Katex 的 Common Issue 块级公式(例如 $$...$$)必须位于空行。 即在开头的 $$ 前和在结尾的 $$ 后不能有除了空白字符以外的其他字符。(#32comment) 不支持 Unicode。(#32comment) 行内公式(例如 $...$)在开头的 $ 后面和结尾的 $ 前面不能含有空格。(#32comment) 如果你在文章的各级标题中(例如 ## 标题)使用公式。 那么文章目录中的这个标题会出现 3 次未渲染的公式代码(#32comment) 如果你在文章 Title 中使用公式，那么公式将不会被渲染。(#32comment) 我们目前使用的 Katex 版本为 0.7.1，这里面可能有某些问题是因为 Katex 版本老旧导致的； 但是，就像上面所说的，数学公式的渲染必须依靠渲染器来支持，目前的 Katex 相关的渲染器仅支持到 Katex 0.7.1； 我们会持续关注相关渲染器的更新，如果有渲染器支持更高版本的 Katex，我们会及时更新我们的 Katex 版本。 相关链接 Katex 与 MathJax 渲染速度对比 Katex 支持的功能列表 相关配置说明 注意，在修改配置选项时，不要更改配置的缩进； 目前，NexT 的所有配置都采用2 空格的缩进； 如果配置的内容接在冒号后面，那么内容和冒号之间必须有一个空格(例如enable: true) 123456789101112131415161718192021222324252627# Math Equations Render Supportmath: enable: false # Default(true) will load mathjax/katex script on demand # That is it only render those page who has 'mathjax: true' in Front Matter. # If you set it to false, it will load mathjax/katex srcipt EVERY PAGE. per_page: true engine: mathjax #engine: katex # hexo-rendering-pandoc (or hexo-renderer-kramed) needed to full MathJax support. mathjax: # Use 2.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/mathjax@2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML # For direct link to MathJax.js with CloudFlare CDN (cdnjs.cloudflare.com). #cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) # needed to full Katex support. katex: # Use 0.7.1 as default, jsdelivr as default CDN, works everywhere even in China cdn: //cdn.jsdelivr.net/npm/katex@0.7.1/dist/katex.min.css # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China #cdn: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css enable true 或者 false，默认为 false。 true 是打开数学公式渲染，false 则是关闭。 per_page true 或者 false，默认为 true。 这个选项是控制是否在每篇文章都渲染数学公式； 默认(true) 的行为是只对 Front Matter 中含有 mathjax: true 的文章进行数学公式渲染。 如果 Front Matter 中不含有 mathjax: true，或者 mathjax: false，那么 NexT 将不会对这些文章进行数学公式渲染。 例如： 123456&lt;!-- 这篇文章会渲染数学公式 --&gt;---title: 'Will Render Math'mathjax: true---.... 123456&lt;!-- 这篇文章不会渲染数学公式 --&gt;---title: 'Not Render Math'mathjax: false---.... 12345&lt;!-- 这篇文章也不会渲染数学公式 --&gt;---title: 'Not Render Math Either'---.... 当你将它设置为 false 时，它就会在每个页面都加载 MathJax 或者 Katex 来进行数学公式渲染。 cdn MathJax 和 Katex 都提供了 cdn 的配置，如果你不知道什么是 cdn ，请不要修改这个配置。 首先，MathJax 和 Katex 都使用了 jsDelivr 作为默认 CDN； 之所以选择 jsDelivr 是因为它在全球各地都有比较不错的速度，而且具有中国官方颁布的 ICP 证书，在中国也能比较好地访问。 同时，我们也提供了其他的 CDN 备选方案，包括著名的 CDNJS。 对于 MathJax 来说，我们目前采用的版本为 2.7.1。 对于 Katex，由于上面提到的版本问题，我们目前采用的版本为 0.7.1。 如果你想尝试我们提供的备选方案以外的 CDN，请注意使用对应的版本。 特别的，对于中国的博客主，或者您的博客访问大部分来源于中国，由于 CDNJS 在部分中国地区被墙，请不要使用 CDNJS 作为 CDN。]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>HTML</tag>
        <tag>Math</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[静态博客框架Hexo与主题NexT的安装配置]]></title>
    <url>%2F2019%2F04%2F13%2F%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6Hexo%E4%B8%8E%E4%B8%BB%E9%A2%98NexT%E7%9A%84%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[静态博客框架Hexo与主题NexT的安装配置 安装前提 安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js1 Git2 Typora3 安装Node.js时请勾选Add to PATH选项。 详细步骤点击我 安装配置Hexo 1npm install -g hexo-cli 建站 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件 123hexo init dmbyblogcd dmbyblognpm install 站点配置 站点：dmbyblog 主题：NexT 站点配置文件：dmbyblog\_config.yml 主题配置文件：dmbyblog\themes\next\_config.yml 修改站点配置文件，即dmbyblog\_config.yml 12345678910# Sitetitle: 大漠白杨博客 # 网站标题subtitle: 活到老 学到老 # 网站副标题description: 网站前端开发与生活日常随记 # 网站描述keywords: WEB前端, HTML, CSS, Javascript, Vue, 框架 # 关键词author: 大漠白杨 # 你的昵称language: zh-CN # 网站使用的语言 timezone: Asia/Shanghai # 网站时区url: http://dmby.swpu.edu.cn # 网址 常用指令 功能 指令 精简指令 网站初始化 hexo init [folder] 新建一篇文章 hexo new [layout] &lt;title&gt; 生成静态文件 hexo generate hexo g 启动服务器 hexo server hexo s 清除缓存文件 hexo clean 详情点击 安装主题NexT 前往 NexT下载页 选择最新的发布版本下载，然后将下载的压缩包解压至站点的 themes目录下，并将解压后的文件更改为 next 与所有Hexo主题一样，把主题源码导入themes目录后，打开站点配置文件， 找到 theme 字段，并将其值更改为 next 就完成了主题的切换。 运行 12hexo cleanhexo s -g 选择 Scheme 123456789# ---------------------------------------------------------------# Scheme Settings# ---------------------------------------------------------------# Schemesscheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观#scheme: Pisces # 双栏 Scheme，小家碧玉似的清新#scheme: Gemini 配置主题NexT 设置菜单 123456789menu: home: / || home # 首页 #about: /about/ || user # 关于 tags: /tags/ || tags # 标签 categories: /categories/ || th # 分类 archives: /archives/ || archive # 归档 #schedule: /schedule/ || calendar # 日程表 #sitemap: /sitemap.xml || sitemap # 站点地图 #commonweal: /404/ || heartbeat # 公益 404 注意：若你的站点运行在子目录中，请将链接前缀的 / 去掉，这儿菜单项目名称大小写直接与language\zh-CN 中的对应，不然不显示中文。 添加「标签」页面 新建页面 12cd your-hexo-sitehexo new page tags 修改站点目录下 source/tags 的 index.md 文件如下： 12345---title: tagsdate: 2019-04-14 20:21:30type: &quot;tags&quot;--- 修改主题配置文件，取消 #tags: /tags 这行注释。 添加「分类」页面 新建页面 12cd your-hexo-sitehexo new page categories 修改站点目录下 source/categories 的 index.md 文如下： 12345---title: categoriesdate: 2019-04-14 20:21:45type: &quot;categories&quot;--- 修改主题配置文件，取消 #categories: /categories 这行注释。 添加「关于」页面 新建页面 12cd your-hexo-sitehexo new page about 修改主题配置文件，取消 #about: /about 这行注释。 编辑站点目录下 source/about 的 index.md 文件内容，内容将显示在关于页面。 腾讯公益404页面 腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！ 12$ cd your-hexo-site/source$ mkdir 404 在your-hexo-site/source/404目录下创建index.html，内容如下： 1234567891011121314151617&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;your site url &quot; homePageName=&quot;回到我的主页&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 社交链接 123social: GitHub: https://github.com/swpitiger|| github E-Mail: mailto:20655132@qq.com || envelope 头像设置 在站点配置文件，新增字段 avatar ，值设置成头像的链接地址。 1234avatar: url: /images/avatar.jpg # 头像 rounded: true # 圆角 rotated: true # 旋转 把制作的头像，以及网站的logo全部复制到dmbyblog\themes\next\source\images 文章底部标签显示的优化 修改/themes/next/layout/_macro/post.swig，搜索 rel="tag"&gt;#，将 # 换成 &lt;i class="fa fa-tag"&gt;&lt;/i&gt; 文章图片处理 新建文章时，在相同目录下创建同名文件夹（便于图片管理） 修改站点配置文件 1post_asset_folder: true # 启动 Asset 文件夹 安装hexo-asset-image插件，支持标准markdown图片插入。 1npm install hexo-asset-image --save 新建文章 1hexo new filename 新建文章时，在创建filename文件的同时，还在/source/posts目录下创建了与filename同名的文件夹，用于存放文章中的图片。 Typora图片插入设置 文件–-&gt;偏好设置—&gt;图片插入 12复制到指定路径./$&#123;filename&#125; 网站图标设置 图标素材网站：iconfont；easyicon 下载16x16以及32x32大小的PNG格式图标，置于/themes/next/source/images/下 打开themes/next/下的_config.yml，查找favicon 1234567favicon: small: /images/favicon-16x16.png medium: /images/favicon-32x32.png apple_touch_icon: /images/apple-touch-icon.png safari_pinned_tab: /images/logo.svg #android_manifest: /images/manifest.json #ms_browserconfig: /images/browserconfig.xml 显示文章摘要 123auto_excerpt: enable: true length: 150 文章摘要配图 打开themes\next\layout\_macro\post.swig，在 {% if is_index %} 和 {% if post.description and theme.excerpt_description %}之间添加如下内容 123456&#123;% if post.images %&#125; &lt;div class="out-img-topic"&gt; &lt;img src=&#123;&#123; post.images &#125;&#125; class="img-topic"&gt; &lt;/div&gt;&#123;% endif %&#125; 向themes\next\source\css\_custom\custom.styl中添加如下内容 1234567891011121314151617//文章摘要配图//图片外部的容器方框，限制图片大小.out-img-topic &#123; display: block; max-height:500px; margin-bottom: 24px; overflow: hidden;&#125;//图片img.img-topic &#123; display: block ; margin-left: .7em; margin-right: .7em; padding: 0; float: right; clear: right;&#125; 将摘要图片储存于themes\next\source\images中，建议在此路径下单独建一个文件夹存放摘要图片，这个图片和文章中插图的存放路径不同，不是一个概念。然后在文章YAML头信息中添加images字段，将值填为/images/imagename.jpg。 文章图片放大 配置 NexT _config.yml 1fancybox: true 安装fancyBox 3 for NexT theme-next-fancybox 12cd themes/nextgit clone https://github.com/theme-next/theme-next-fancybox3 source/lib/fancybox 升级 fancyBox 12cd themes/next/source/lib/fancyboxgit pull 文章末尾添加版权声明 12345creative_commons: license: by-nc-sa sidebar: false post: true # 默认 false language: 本地搜索 Dependencies: https://github.com/theme-next/hexo-generator-searchdb 1npm install hexo-generator-searchdb --save 站点配置文件 123456# 本地搜索search: path: search.xml field: post format: html limit: 10000 主题配置文件 12local_search: enable: true 文章字数与阅读时长估计 安装 1npm install hexo-symbols-count-time --save 站点配置 12345symbols_count_time: symbols: true time: true total_symbols: true total_time: true NexT主题配置 123456symbols_count_time: separated_meta: true item_text_post: true item_text_total: false awl: 2 wpm: 300 详细配置：https://github.com/theme-next/hexo-symbols-count-time 设置建站时间 12footer: since: 2019 Mermaid tag 渲染文章中的流程图、序列图、甘特图、类图、Git图，插件与typora显示效果一致。 安装插件，网站根目录下执行： 1npm install hexo-filter-mermaid-diagrams 配置主题 12345mermaid: enable: true # Available themes: default | dark | forest | neutral theme: forest cdn: //cdn.jsdelivr.net/npm/mermaid@8/dist/mermaid.min.js 引入相关的js文件 找到主题里面的页脚文件，也即 themes/next/layout/_partials/footer.swig ，在文件最后加上以下内容 12345678&#123;% if (theme.mermaid.enable) %&#125; &lt;script src='https://unpkg.com/mermaid@&lt;%= theme.mermaid.version %&gt;/dist/mermaid.min.js'&gt;&lt;/script&gt; &lt;script&gt; if (window.mermaid) &#123; mermaid.initialize(&#123;theme: 'forest'&#125;); &#125; &lt;/script&gt;&#123;% endif %&#125; PDF标签 在文章中使用PDF标签嵌入PDF文件。 插件安装 12cd themes/nextgit clone https://github.com/theme-next/theme-next-pdf source/lib/pdf 配置主题 12345pdf: enable: true height: 500px # 显示窗口高度 pdfobject: cdn: //cdn.jsdelivr.net/npm/pdfobject@2.1.1/pdfobject.min.js 使用格式 1&#123;% pdf /path/to/your/file.pdf %&#125; 页面加载进度条 安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-pace source/lib/pace 配置主题 1pace: true 背景动画 以下三种风格都选就太乱了，我选用的是JavaScript 3D library中的three_waves。 Canvas-nest 风格 进入主题目录，安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest 修改主题配置，启用 12canvas_nest: enable: true JavaScript 3D library风格 进入主题目录，安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-three source/lib/three 修改主题配置，启用 123456# three_wavesthree_waves: true# canvas_linescanvas_lines: false# canvas_spherecanvas_sphere: false Canvas-ribbon风格 进入主题目录，安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-canvas-ribbon source/lib/canvas-ribbon 修改主题配置，启用 12345canvas_ribbon: enable: true size: 300 alpha: 0.6 zIndex: -1 设置引用字体格式 安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-han source/lib/Han 配置主题 1han: true 汉字与英文之间加空格符 安装插件 12cd themes/nextgit clone https://github.com/theme-next/theme-next-pangu.git source/lib/pangu 配置主题 1pangu: true 右上角github-banner 1234github_banner: enable: true permalink: https://github.com/swpitiger title: Follow me on GitHub 页脚信息 1234567891011powered: # Hexo link (Powered by Hexo). enable: true # Version info of Hexo after Hexo link (vX.X.X). version: truetheme: # Theme &amp; scheme info link (Theme - NexT.scheme). enable: true # Version info of NexT after scheme info (vX.X.X). version: true RSS订阅 安装插件 1npm install hexo-generator-feed --save 配置站点 123456789feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date 配置主题 1rss: atom.xml 文章打赏 配置主题 123456789101112# Reward (Donate)reward_settings: # If true, reward would be displayed in every article by default. # You can show or hide reward in a specific article throuth `reward: true | false` in Front Matter. enable: true animation: false comment: 坚持原创技术分享，您的支持将鼓励我继续创作！reward: wechatpay: /images/wechatpay.jpg #alipay: /images/alipay.png #bitcoin: /images/bitcoin.png 数学公式 安装渲染引擎 12npm un hexo-renderer-marked --savenpm i hexo-renderer-pandoc --save 配置 next/_config.yml 123456789math: enable: true per_page: false # 每页都渲染公式 #per_page: true # 仅渲染文章Front Matter中 mathjax: true 的页面. engine: mathjax mathjax: cdn: //cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML mhchem: //cdn.jsdelivr.net/npm/mathjax-mhchem@3 # 化学公式 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s Hexo添加文章时自动打开编辑器 首先在Hexo目录下的scripts目录中创建一个JavaScript脚本文件typora.js。如果没有这个scripts目录，则新建一个。通过这个脚本，我们用其来监听hexo new这个动作，并在检测到hexo new之后，执行编辑器打开的命令。 1234var spawn = require('child_process').exec;hexo.on('new', function(data)&#123; spawn('start "C:\Program Files\Typora\Typora.exe" ' + data.path);&#125;); Hexo功能增强插件 介绍 hexo-enhancer是一个Hexo功能增强插件。 此插件支持的功能较多，并且未来会继续增加，可以理解为插件包。到目前为止，此插件支持的功能如下： 自动生成title：根据文件名自动生成标题。 自动生成date：根据文件名自动生成日期，具体策略类似Jekyll。 自动生成abbrlink：根据标题进行base32和crc32生成短链接。 自动生成categories：根据文件的路径解析文章所属分类。 自动生成tags：根据配置在_config.yml中的可用tags和keywords自动扫描文章中出现的标签。 只有标签生成功能有效果。 有图片的文章短链接图片访问不到。 分类也没变化 安装，详细说明 1npm install hexo-enhancer --save 部署github网站 建立github博客仓库 注册github账户并登录 New repository Repository Name 中输入 你的github用户名.github.io，其他默认 Create repository 关联github与本地仓库 设置git用户名和email 12git config --global user.name &quot;你的github用户名&quot;git config --global user.email &quot;你注册github使用的邮箱&quot; 生成ssh密钥 1ssh-keygen -t rsa -C &quot;你注册github使用的邮箱&quot; 生成过程中全选默认，在C:.ssh目录下生成三个文件，其中id_rsa.pub是公钥known_hosts是私钥。 github公钥设置 登陆github，Setting—&gt;SSH and GPG keys—&gt;New SSH key—&gt;输入Title，将公钥内容粘贴到Key中Add SSH key即OK。 安装部署插件 1npm install --save hexo-deployer-git 配置站点 1234deploy: type: git repo: git@github.com:swpitiger/swpitiger.github.io.git brance: master 发布网站 1hexo d 最好的git教程 常用命令 在本地目录下关联远程repository 1git remote add origin git@github.com:git_username/repository_name.git 取消本地目录下关联的远程库 1git remote remove origin 删除本地仓库文件夹 12rm -rf .gitrm -rf 文件夹 删除远程github仓库 常用git命令清单 收录未用 站点地图 安装 1$ npm install hexo-generator-seo-friendly-sitemap --save 配置 1234sitemap: path: sitemap.xml tag: false category: false Hexo博客收录百度和谷歌-基于Next主题 4.20 图床和上传工具 盘点一下免费好用的图床 https://sm.ms/ 文章置顶 Hexo博客彻底解决置顶问题 一种方法是手动对相关文件进行修改，具体可参考这篇文章。 另一种方法就是，目前已经有修改后支持置顶的仓库，可以直接用以下命令安装 12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 然后在需要置顶的文章的Front-matter中加上top: true即可。比如下面这篇文章： 123456---title: hexo+GitHub博客搭建实战date: 2017-09-08 12:00:25categories: 博客搭建系列top: true--- 到目前为止，置顶功能已经可以实现了。所有相关博文到这边就结束了。 不过置顶的文章显示在最上面之后，如果没有明确的置顶标志，是不是感觉有点怪怪的呢？ 设置置顶标志 打开：/blog/themes/next/layout/_macro 目录下的post.swig文件，定位到&lt;div class="post-meta"&gt;标签下，插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=7D26CD&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; 效果展示： 博客总访问量统计 打开themes/next/下的_config.yml，查找busuanzi 12345678busuanzi_count: enable: true total_visitors: false total_visitors_icon: user total_views: false total_views_icon: eye post_views: true post_views_icon: eye 目前好像用不了了 Node.js是一个Javascript运行环境,是一个基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。Node.js 使用事件驱动， 非阻塞I/O 模型而得以轻量和高效，非常适合在分布式设备上运行数据密集型的实时应用。↩ 提交代码必备，直接使用它的命令行工具就很OK，安装完成后鼠标右键菜单就会多出两个选项：Git GUI Here 、Git Bash Here，其中Git Bash Here就可以在当前目录下打开Git的命令行！↩ 简单而强大的markdown编辑工具。↩]]></content>
      <categories>
        <category>WEB前端</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>博客</tag>
        <tag>框架</tag>
        <tag>安装配置</tag>
        <tag>Typora</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>HTML</tag>
        <tag>Math</tag>
        <tag>Git</tag>
        <tag>CSS</tag>
        <tag>Javascript</tag>
        <tag>Vue</tag>
        <tag>WEB前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo标签插件（Tag Plugins）]]></title>
    <url>%2F2019%2F04%2F07%2FHexo%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6%EF%BC%88Tag%20Plugins%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Hexo标签插件（Tag Plugins） 标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。 引用块 在文章中插入引言，可包含作者、来源和标题。 别号： quote 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 样例 没有提供参数，则只输出普通的 blockquote 123&#123;% blockquote %&#125;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.&#123;% endblockquote %&#125; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子 123&#123;% blockquote David Levithan, Wide Awake %&#125;Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.&#123;% endblockquote %&#125; Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake 引用 Twitter 123&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;NEW: DevDocs now comes with syntax highlighting. http://devdocs.io&#123;% endblockquote %&#125; NEW: DevDocs now comes with syntax highlighting. http://devdocs.io @DevDocstwitter.com/devdocs/status/356095192085962752 引用网络上的文章 123&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;Every interaction is both precious and an opportunity to delight.&#123;% endblockquote %&#125; Every interaction is both precious and an opportunity to delight. Seth GodinWelcome to Island Marketing 代码块 在文章中插入代码。 别名： code 123&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;code snippet&#123;% endcodeblock %&#125; 样例 普通的代码块 1234&#123;% codeblock %&#125;alert(&apos;Hello World!&apos;);&#123;% endcodeblock %&#125;alert(&apos;Hello World!&apos;); 指定语言 1234&#123;% codeblock lang:objc %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20];&#123;% endcodeblock %&#125;[rectangle setX: 10 y: 10 width: 20 height: 20]; 附加说明 1234&#123;% codeblock Array.map %&#125;array.map(callback[, thisArg])&#123;% endcodeblock %&#125;Array.maparray.map(callback[, thisArg]) 附加说明和网址 123456&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3]&#123;% endcodeblock %&#125;_.compactUnderscore.js_.compact([0, 1, false, 2, &apos;&apos;, 3]);=&gt; [1, 2, 3] 反引号代码块 另一种形式的代码块，不同的是它使用三个反引号来包裹。 [title] [url] [link text] code snippet ```1234## Pull Quote在文章中插入 Pull quote。 content 1234## jsFiddle在文章中嵌入 jsFiddle。 1234## Gist在文章中嵌入 Gist。 1234## iframe在文章中插入 iframe。 1234## Image在文章中插入指定大小的图片。 1234## Link在文章中插入链接，并自动给外部链接添加 `target=&quot;_blank&quot;` 属性。 text url [external] [title] 1234## Include Code插入 `source` 文件夹内的代码文件。 1234## Youtube在文章中插入 Youtube 视频。 1234## Vimeo在文章中插入 Vimeo 视频。 1234## 引用文章引用其他文章的链接。 1234## 引用资源引用文章的资源。 1234## Raw如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。 content ```]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Front-matter]]></title>
    <url>%2F2019%2F04%2F07%2FFront-matter%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Front-matter Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说： 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- 以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。 参数 描述 默认值 layout 布局 title 标题 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 分类和标签 只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。 12345categories:- Diarytags:- PS3- Games 分类方法的分歧 如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法： categories: - Diary - Life 会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。 JSON Front-matter 除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 --- 代换成 ;;; 即可。 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;; Front-matter Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Front-matter is terminated by three dashes when written in YAML or three semicolons when written in JSON. YAML 1234---title: Hello Worlddate: 2013/7/13 20:46:25--- JSON 123&quot;title&quot;: &quot;Hello World&quot;,&quot;date&quot;: &quot;2013/7/13 20:46:25&quot;;;; Settings &amp; Their Default Values Setting Description Default layout Layout title Title date Published date File created date updated Updated date File updated date comments Enables comment feature for the post true tags Tags (Not available for pages) categories Categories (Not available for pages) permalink Overrides the default permalink of the post Categories &amp; Tags Only posts support the use of categories and tags. Categories apply to posts in order, resulting in a hierarchy of classifications and sub-classifications. Tags are all defined on the same hierarchical level so the order in which they appear is not important. Example 1234567![20160428080954](D:/liubin/Pictures/20160428080954.jpg)categories:- Sports- Baseballtags:- Injury- Fight- Shocking If you want to apply multiple category hierarchies, use a list of names instead of a single name. If Hexo sees any categories defined this way on a post, it will treat each category for that post as its own independent hierarchy. Example 12345categories:- [Sports, Baseball]- [MLB, American League, Boston Red Sox]- [MLB, American League, New York Yankees]- Rivalries]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>front-matter</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NexT主题v7.10 启用数学公式与化学公式操作]]></title>
    <url>%2F2019%2F04%2F06%2FNexT%E4%B8%BB%E9%A2%98v7.10-%E5%90%AF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%8E%E5%8C%96%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[开启 Next 主题数学 公式与化学表达式 设置配置文件 使用 MathJax 渲染引擎 1234567891011121314151617181920212223242526272829303132 [_config中英文next.yml](..\..\..\_config中英文next.yml) _config.ymlmath: enable: true # per_page 默认(`true`) 只对 Front Matter 中含有 `mathjax: true` 的文章进行数学公式渲染。 # 如果 Front Matter 中不含有 `mathjax: true`，或者 `mathjax: false`，那么 NexT 将不会对这些文章进行数学公式渲染。 # per_page 为`false`，则将对每篇文章应用数学公式渲染。 per_page: true engine: mathjax #engine: katex # hexo-rendering-pandoc (or hexo-renderer-kramed) needed to full MathJax support. mathjax: cdn: //cdn.jsdelivr.net/npm/mathjax@2/MathJax.js?config=TeX-AMS-MML_HTMLorMML #cdn: //cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML # See: https://mhchem.github.io/MathJax-mhchem/ mhchem: //cdn.jsdelivr.net/npm/mathjax-mhchem@3 #mhchem: //cdnjs.cloudflare.com/ajax/libs/mathjax-mhchem/3.3.2 # hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) needed to full Katex support. katex: cdn: //cdn.jsdelivr.net/npm/katex@0/dist/katex.min.css #cdn: //cdnjs.cloudflare.com/ajax/libs/KaTeX/0.7.1/katex.min.css copy_tex: # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex enable: false copy_tex_js: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.js copy_tex_css: //cdn.jsdelivr.net/npm/katex@0/dist/contrib/copy-tex.min.css 提供渲染引擎 步骤 首先，卸载原有的渲染器 hexo-renderer-marked，安装 hexo-renderer-pandoc 渲染器。 执行 Hexo 生成，部署，或者启动服务器： 12hexo clean &amp;&amp; hexo g -d# 或者 hexo clean &amp;&amp; hexo s 详细参考 https://github.com/theme-next/hexo-theme-next 中 Math.md 文档]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
        <tag>math</tag>
        <tag>公式</tag>
        <tag>数学</tag>
        <tag>化学</tag>
        <tag>Hexo</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>HTML</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法帮助]]></title>
    <url>%2F2019%2F04%2F03%2FMarkdown%E8%AF%AD%E6%B3%95%E5%B8%AE%E5%8A%A9%2F</url>
    <content type="text"><![CDATA[markdown - 更简洁、更高效 ================================================= 强烈建议开发者认真阅读本文档，掌握md及HBuilderX对md的强大支持。 如果没有点右键设置自动换行，可按Alt+滚轮横向滚动查看。 很多人只把markdown用于网络文章发表，这糟蹋了markdown。 markdown不止是HTML的简化版，更重要的是txt的升级版、word的轻量版、笔记的最佳载体。 作为一种简单的格式标记语言，不同于txt的无格式，不同于HTML的复杂标记，也不同于word的鼠标调整样式。markdown通过简单的几个字符键入，就可以快捷的定义文档的样式。 比如在行首敲一个“#”，就把这行定义为了1级标题，并且在HBuilderX里有直观完善的着色，这样无需发布为web页面，可直接当word用。 掌握markdown，你可以完全抛弃txt和笔记软件的编辑器，并且在大多数场景下替代掉复杂臃肿的word。享受简洁之美、享受效率提升。 而HBuilderX，可以被称为最强大的markdown书写工具了。 下面的示例列举了markdown语法及对应的HBuilderX使用技巧： 开始前，可以先按下文档结构图的快捷键Alt+w（Mac是Ctrl+w），浏览本文的大纲。 标题语法 markdown的标题是行首以#号开头，空格分割的，不同级别的标题，在HX里着色也不同。如下： # 标题1 ## 标题2 ### 标题3 #### 标题4 ##### 标题5 ###### 标题6 标题使用技巧： 1. Emmet快速输入：敲h2+Tab即可生成二级标题【同HTML里的emmet写法，不止标题，HX里所有可对应tag的markdown语法均支持emmet写法】。仅行首生效 2. 智能双击：双击#号可选中整个标题段落 3. 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动在下一行补#。而连续2次回车后将自动补的#去掉。(体验同word) 4. 回车后再次按Tab可递进一层标题，再按Tab切换列表符 5. 在# 后回车，可上插一个空标题行【同word】，或任意位置按Ctrl+Shift+Enter也可以上插空标题行 6. 折叠： - 点标题前的-号可折叠该标题段落，快捷键是Alt+-（展开折叠是Alt+=） - 多层折叠时折叠或展开子节点，快捷键是Alt+Shift+-或= - 全文全部折叠或展开，快捷键是Ctrl+Alt+Shift+-或= - 折叠其他区域，快捷键是Alt+Shift+o。这对长文档管理非常有用，可以专注于当前章节 - 可以在菜单-跳转-折叠中随时找到这些功能 列表 markdown的列表支持有序列表、无序列表以及特殊的任务列表。 同样也是在行前加一个特殊符号，并空格后再跟列表文字内容。 有序列表 有序列表就是有顺序的列表，依靠行前的数字标记顺序。 1. 有序列表1 【设置或取消有序列表符的快捷键：Ctrl+Alt+1，可选中多行批量设置序号；支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标】 2. 有序列表2 【列表后回车会自动补序号】 4. 有序列表3 【智能双击：双击前面的数字，可重新对数字排序，修正序号错误，并选中有序列表段落（左边的4是故意写错让你体验的）】 无序列表 无序列表就是列表不排序，无序列表因书写随意而被更广泛的使用。 无序列表有3种前缀，HX里分别用于表示1级列表、2级列表、3级列表。 - 无序列表1 【快捷键：Ctrl+Alt+-；智能双击：双击-号可选中整段无序列表；再次按Tab会更换二级列表符】 * 无序列表2 * Emmet：li后敲Tab可生成号列表符，行首生效 快捷键：Ctrl+Alt+8【8即对应的数字】，支持多光标批量设置列表符，即按Ctrl+鼠标左键添加多光标 智能双击：双击号可选中整段无序列表 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；再次按Tab会更换列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符 * *号常用于二级列表，列表符后继续Tab，可切换列表符 + 无序列表3 【快捷键：Ctrl+Alt+=；常用于三级列表；其他同上】 任务列表 任务列表非常实用，管理待办已办非常便利。 [ ] 任务列表-未完成任务 【快捷键：Ctrl+Alt+[】 [x] 任务列表-已完成任务 【快捷键：Ctrl+Alt+]】 1. 智能双击：双击方括号内可切换勾选状态，把任务标记为完成或未完成；双击方括号右侧可选中任务列表段落 2. 智能回车：回车后自动补任务列表前缀符号；连续按回车清除前缀符号；在列表符后回车或行尾Shift+回车，上一行留出列表符 以上三种列表，均支持批量修改列表符，有如下方式建议依次学习尝试： 1. 选中多行，按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，批量设置列表符 2. 如果需要跳行设置有序或无序列表，通过Ctrl+鼠标左键点中目标多行（可不连续），产生多光标，然后按快捷键Ctrl+Alt+“1”或“-”或“[”或“]”，可跳行设置列表符，尤其是有序列表，数字也会跳行加1 3. 按Alt+鼠标选中行首那列（列选择），这样每行行首都有光标，然后再键入或删除列表符即可批量操作 4. 选中多行，按快捷键Ctrl+Shift+（其实就是Ctrl+|），可以在每行行首添加一个光标 引用列表 引用1 引用2 快捷键：Ctrl+Alt+Shift+. 智能双击：双击&gt;号可选中整段引用列表 智能回车：行尾回车或行中Ctrl+Enter强制换行后会自动续列表；连续按回车会清除列表符；在列表符后回车或行尾Shift+回车，上一行留出列表符 文字样式语法 加粗 【快捷键：Ctrl+B，支持多光标；Emmet：b后敲Tab】 加粗2 倾斜【Emmet：i后敲Tab；前后包围：选中文字按Ctrl+，可以继续输入_】 倾斜 删除线 ```12345678910111213141516171819202122232425262728293031323334353637383940包围插入：先选中文字内容，然后按_*~`等符号，会自动在2侧加包围智能双击：双击语法区前面的定义符号，选中包含定义符的整段文字去包围：选中整段文字后，按Ctrl+Shift+]，可去除2侧包围符号引号括号虽然不属于markdown语法，但也支持相同的包围、选择、去包围操作。引号括号智能双击选择时略特殊的是：双击引号括号内侧，选中引号括号里的内容(不含引号括号)；按下Alt+双击引号括号内侧，则选中包含符号的整段文字HBuilderX还支持以下对2侧文本高效处理的手段1. 选中文字按Ctrl+\是在选区两侧添加光标，可以继续输入~~，会在2侧同时输入2. 向2侧扩大选择：【Win:Alt+Shit+→ 、Mac:Ctrl++Shit+→】；由2侧向内减少选择：【Win:Alt+Shit+← 、Mac:Ctrl++Shit+←】[链接文字](http://dcloud.io)1. Emmet：a后敲Tab2. 打开链接：Alt+鼠标单击；如果是本地文件，可通过Shift+Alt+单击，在另一分栏打开文件3. 智能粘贴：粘贴URL会自动变成超链接格式；粘贴本地文件进来也会自动创建引用链接4. 智能双击：双击语法区开头，即[左侧，选中包含定义符的整段文字![图片描述文字](logo.jpg)1. Emmet：img后敲Tab2. 智能粘贴：粘贴剪切板里的图形时会自动保存为本md文档的附件；删除文档中的图片语法，保存md文档时会自动删除对应的图片附件；粘贴图片文件时自动变成链接引用格式；3. 悬浮预览：鼠标移到图片语法上，本地图片会自动显示出来4. 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字# 表格 | | | ||-- |-- |-- || | | || | | |1. Emmet：table3*3后敲Tab，表示生成3行3列的表格，行首生效2. md表格对齐是传统md的痛点，HBuilderX按下Ctrl+K可以自动整理表格格式（暂未兼容不同缩放模式和字体的情况）3. 支持从excel、wps、word、number的表格中复制粘贴表格进来（不支持合并单元格和单元格换行）# 分割线------------- 【Emmet：hr后敲Tab】*************=============# 代码区``` javascript var a = document Emmet：code后敲Tab，行首生效 智能双击：双击语法区开头，即!左侧，选中包含定义符的整段文字 注释 快捷键：Ctrl+/ 智能双击：双击注释首尾的定义符，选中整段注释 其他emmet快捷输入 day后敲Tab，当前日期。注意day需在行首或前面有空格 time后敲Tab，当前时间。注意time需在行首或前面有空格 文档结构图 文章很长时，word里有文档结构图，HBuilderX也有。 菜单视图-文档结构图，快捷键Alt+W(mac是ctrl+W)，轻松管理长文档 运行、预览和打印PDF 对md文件点工具栏或菜单里的浏览器运行，可以使用外部浏览器预览此md文件，会自动渲染为HTML。 点右上角的预览【快捷键Alt+p】，可在HBuilderX右侧预览该md文档的HTML渲染结果。 在浏览器中点打印，选择打印到PDF，可将md输出为PDF格式。（注意在打印选项里去掉页眉页脚） 其他常用但你可能不知道的快捷操作技巧 Ctrl+鼠标左键添加多光标，然后敲字或粘贴，可批量处理。Ctrl+鼠标左键拖选，可选中多个选区。 Ctrl+鼠标右键删除多光标 不选内容按Ctrl+C或X可复制或剪切整行 选中2个选区后，按Ctrl+Shift+X，可互换选区内容。如无选区，只是2个光标，则互换2行 Ctrl+上下键可上下移动行 Ctrl+Insert可重复插入当前行，如果有选中内容，可重复插入选中内容 Ctrl+Shift+K可合并多行（是格式化Ctrl+K的反操作） 删除 按Ctrl+D可删除选中行，支持多光标 Shift+Del删除到行尾 Shift+Backspace删除到行首 选择 Ctrl+E选相同词(mac是Command+D)，连续按可选中多词进一步操作，比替换更方便 Ctrl+L可连选多行，Ctrl+Shift+L也是选择行，但不选行首尾的空白字符 Ctrl+=可逐级放大选区 双击标题、列表符可选中相应段落 双击英文引号、括号内侧，可选中内部内容 双击缩进符，可选中同缩进段落 双击连字符比如-或_，可选中相连的词，比如双击这里试试，uni-app 查找 Ctrl+P查找文件 Ctrl+Alt+F可在当前目录的所有文档中搜索指定关键字(mac是Command+Shift+f) 选中文字按F3，查找下一个，Shift+F3找上一个 云同步：HBuilderX+markdown用于云同步笔记的技巧，请参考http://ask.dcloud.net.cn/article/13097 都学会了吗？ markdown语法其实很简单，认真学半小时就能掌握。 HBuilderX的极客操作则需要不停反复练习，熟练掌握这些技巧，你将成为高效极客！]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>示例</tag>
        <tag>markdown</tag>
        <tag>typora</tag>
        <tag>Typora</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typora入门指南]]></title>
    <url>%2F2019%2F04%2F02%2FTypora%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[入门指南 标题的自动编号 关于在哪里放置这些CSS，请按照添加自定义CSS。 此CSS片段会自动为文章中的所有标题添加编号，如下所示： 1 如何使用： 将以下内容添加到主题文件夹下的base.user.css或[theme] .user.css中。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/** initialize css counter */#write &#123; counter-reset: h1&#125;h1 &#123; counter-reset: h2&#125;h2 &#123; counter-reset: h3&#125;h3 &#123; counter-reset: h4&#125;h4 &#123; counter-reset: h5&#125;h5 &#123; counter-reset: h6&#125;/** put counter result into headings */#write h1:before &#123; counter-increment: h1; content: counter(h1) ". "&#125;#write h2:before &#123; counter-increment: h2; content: counter(h1) "." counter(h2) ". "&#125;#write h3:before,h3.md-focus.md-heading:before /** override the default style for focused headings */ &#123; counter-increment: h3; content: counter(h1) "." counter(h2) "." counter(h3) ". "&#125;#write h4:before,h4.md-focus.md-heading:before &#123; counter-increment: h4; content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) ". "&#125;#write h5:before,h5.md-focus.md-heading:before &#123; counter-increment: h5; content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) ". "&#125;#write h6:before,h6.md-focus.md-heading:before &#123; counter-increment: h6; content: counter(h1) "." counter(h2) "." counter(h3) "." counter(h4) "." counter(h5) "." counter(h6) ". "&#125;/** override the default style for focused headings */#write&gt;h3.md-focus:before,#write&gt;h4.md-focus:before,#write&gt;h5.md-focus:before,#write&gt;h6.md-focus:before,h3.md-focus:before,h4.md-focus:before,h5.md-focus:before,h6.md-focus:before &#123; color: inherit; border: inherit; border-radius: inherit; position: inherit; left:initial; float: none; top:initial; font-size: inherit; padding-left: inherit; padding-right: inherit; vertical-align: inherit; font-weight: inherit; line-height: inherit;&#125; 自动编号TOC 如果您想要TOC实体也自动编号，您可以尝试由Typora用户发布的http://pastebin.com/NYugSbXk。 自动编号大纲面板。 可折叠大纲面板编号，并尝试https://pastebin.com/XmYgBbaz。 代码块样式/主题 关于在哪里放置这些CSS，请按照添加自定义CSS。 Typora使用CodeMirror在代码围栏中突出显示语法。Typora中的代码围栏cm-s-inner用作其主题类。 要将CodeMirror主题移植到Typora中，例如material.css，您可以： 复制并粘贴到主题文件夹中base.user.css或[theme].user.css下，并将其CodeMirror主题类名替换cm-s-inner为，例如，将原始文件中类名.cm-s-material更改为.cm-s-inner。 在CodeMirror渲染之前，代码围栏具有类似的结构&lt;pre class="md-fences"&gt;&lt;/pre&gt;。因此，还请将字体系列，颜色和背景等基本样式应用到.md-fences选择器中。 所以最终的CSS会是 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/** ported from https://codemirror.net/theme/material.css **//* Name: material Author: Michael Kaminsky (http://github.com/mkaminsky11) Original material color scheme by Mattia Astorino (https://github.com/equinusocio/material-theme)*/.cm-s-inner &#123; background-color: #263238; color: rgba(233, 237, 237, 1);&#125;.cm-s-inner .CodeMirror-gutters &#123; background: #263238; color: rgb(83,127,126); border: none;&#125;.cm-s-inner .CodeMirror-guttermarker, .cm-s-inner .CodeMirror-guttermarker-subtle, .cm-s-inner .CodeMirror-linenumber &#123; color: rgb(83,127,126); &#125;.cm-s-inner .CodeMirror-cursor &#123; border-left: 1px solid #f8f8f0; &#125;.cm-s-inner div.CodeMirror-selected &#123; background: rgba(255, 255, 255, 0.15); &#125;.cm-s-inner.CodeMirror-focused div.CodeMirror-selected &#123; background: rgba(255, 255, 255, 0.10); &#125;.cm-s-inner .CodeMirror-line::selection, .cm-s-inner .CodeMirror-line &gt; span::selection, .cm-s-inner .CodeMirror-line &gt; span &gt; span::selection &#123; background: rgba(255, 255, 255, 0.10); &#125;.cm-s-inner .CodeMirror-line::-moz-selection, .cm-s-inner .CodeMirror-line &gt; span::-moz-selection, .cm-s-inner .CodeMirror-line &gt; span &gt; span::-moz-selection &#123; background: rgba(255, 255, 255, 0.10); &#125;.cm-s-inner .CodeMirror-activeline-background &#123; background: rgba(0, 0, 0, 0); &#125;.cm-s-inner .cm-keyword &#123; color: rgba(199, 146, 234, 1); &#125;.cm-s-inner .cm-operator &#123; color: rgba(233, 237, 237, 1); &#125;.cm-s-inner .cm-variable-2 &#123; color: #80CBC4; &#125;.cm-s-inner .cm-variable-3 &#123; color: #82B1FF; &#125;.cm-s-inner .cm-builtin &#123; color: #DECB6B; &#125;.cm-s-inner .cm-atom &#123; color: #F77669; &#125;.cm-s-inner .cm-number &#123; color: #F77669; &#125;.cm-s-inner .cm-def &#123; color: rgba(233, 237, 237, 1); &#125;.cm-s-inner .cm-string &#123; color: #C3E88D; &#125;.cm-s-inner .cm-string-2 &#123; color: #80CBC4; &#125;.cm-s-inner .cm-comment &#123; color: #546E7A; &#125;.cm-s-inner .cm-variable &#123; color: #82B1FF; &#125;.cm-s-inner .cm-tag &#123; color: #80CBC4; &#125;.cm-s-inner .cm-meta &#123; color: #80CBC4; &#125;.cm-s-inner .cm-attribute &#123; color: #FFCB6B; &#125;.cm-s-inner .cm-property &#123; color: #80CBAE; &#125;.cm-s-inner .cm-qualifier &#123; color: #DECB6B; &#125;.cm-s-inner .cm-variable-3 &#123; color: #DECB6B; &#125;.cm-s-inner .cm-tag &#123; color: rgba(255, 83, 112, 1); &#125;.cm-s-inner .cm-error &#123; color: rgba(255, 255, 255, 1.0); background-color: #EC5F67;&#125;.cm-s-inner .CodeMirror-matchingbracket &#123; text-decoration: underline; color: white !important;&#125;/**apply to code fences with plan text**/.md-fences &#123; background-color: #263238; color: rgba(233, 237, 237, 1); border: none;&#125;.md-fences .code-tooltip &#123; background-color: #263238;&#125; 结果如下： 您也可以按照上面的示例编写自己的CSS样式以进行语法突出显示。 请注意，cm-s-inner这仅适用于代码围栏，不会影响源代码模式中的markdown语法指示灯。并非所有CSS属性都将应用于源代码模式中的代码栅栏。 自定义字体 关于在哪里放置这些CSS，请按照添加自定义CSS。 Typora中的自定义字体由CSS设置。例如，base.user.css在主题文件夹下追加以下内容 123body &#123; font-family: Courier;&#125; 将覆盖当前主题中的字体设置，并应用系统字体Courier，并使编辑区域如下所示： 1 您还可以使用Web字体，例如： 12345@import url(https://fonts.googleapis.com/css?family=Oxygen);body &#123; font-family: &apos;Oxygen&apos;, sans-serif; &#125; 但是为了在加载时使字体更快或在无法访问互联网时使用它，我们建议您下载它并放在Typora的主题文件夹下。 例如，如果您从谷歌字体下载woff2文件并将它们放在[typora-theme-folder]/fonts目录下，那么您可以使用CSS，如： 12345678910111213141516171819/* latin */@font-face &#123; font-family: &apos;Oxygen&apos;; font-style: normal; font-weight: 400; src: local(&apos;Oxygen&apos;), local(&apos;Oxygen-Regular&apos;),url(&apos;./fonts/Oxygen400.woff2&apos;) format(&apos;woff2&apos;);&#125;/* latin */@font-face &#123; font-family: &apos;Oxygen&apos;; font-style: normal; font-weight: 700; src: local(&apos;Oxygen Bold&apos;), local(&apos;Oxygen-Bold&apos;), url(&apos;./fonts/Oxygen700.woff2&apos;) format(&apos;woff2&apos;);&#125;body &#123; font-family: &apos;Oxygen&apos;, sans-serif; &#125; 应用字体。 更改字体大小 更改字体大小的更快捷方法是在首选项面板中执行此操作。在macOS上，“字体大小”位于首选项面板的“常规”部分。在Window / Linux上，它位于“Appearance”部分下，您还可以使用press Ctrl+F在首选项面板中搜索它。 此选项需要您使用的主题支持。如果您正在制作主题css，请使用rem字体单位确保此选项有效。 img 换背景 *下面的一些CSS样式适用于最新版本的Typora（在macOS上&gt; = 0.9.9.6，在Windows上&gt; = 0.9.13）。**关于在哪里放置这些CSS，请按照添加自定义CSS。* 就个人而言，我不建议用户为文本编辑器设置背景，但如果你仍然想要这样，你可以按照这篇文章做。 例如，为Typora添加笔记本背景。图像从此处拍摄，并复制到Typora的主题文件夹下。 CSS代码如下： 1234567891011121314151617content &#123; background: url(./fzm-seamless.notebook.texture-14.png); background-repeat: repeat;&#125;#write &#123; padding-left: 120px; /*adjust writing area position*/&#125;body &#123; background: #F3F3F3; /*Please set this background color as close to the background image as possible. titlebar for seamless window on macOS will use this background color. typora for Win/Linux will use this to judge whether typora is in dark mode or light mode*/&#125;/**Other css may needed to adjust UI components**/ 结果如下： Snip20160625_1 另一个例子： Snip20160625_2 123456789101112131415161718sscontent &#123; background-image: url(http://localhost:4000/media/background/crashed_ship_by_hiddenvortexdesigns-da57nk8.jpg); background-repeat: repeat; background-position: -52px;&#125;#write &#123; margin-top: 24px; background-color: rgba(255, 255, 255, 0.68); margin-bottom: 24px; min-height: calc(100% - 48px);&#125;body &#123; background-color: #8F9D9A;&#125;/**Other CSS to adjuest UI components*/ 添加自定义CSS 此功能要求Windows上的Typora晚于0.9.12或macOS上的0.9.9.5.1 打开主题文件夹 打开首选项面板，然后单击“外观”部分下名为“打开主题文件夹”的按钮，将在Finder /资源管理器中打开Typora的主题文件夹。 您可以在此处添加自定义主题（将有其他文档介绍如何查找/安装/编写主题）。 但有时，您可能只想修改CSS，如更改字体或增加书写区域，并将其应用于所有主题或当前主题而无需编写全新的主题文件，本文档将向您展示操作方法。 将自定义CSS附加到所有主题或其他主题 Typora将按以下顺序加载CSS文件： Typora的基本款式。 当前主题的CSS。 主题文件夹下base.user.css 。 在主题文件夹下{current-theme}.user.css。如果您选择Github作为主题，那么github.user.css也将加载。 如果它们不存在，您可以在主题文件夹下创建base.user.css和{current-theme}.user.css。 如果要更改CSS样式并将其应用于所有主题，则应修改base.user.css并附加自己的CSS，因此无论选择何种主题，您的CSS样式仍将加载并应用。 如果要修改特定主题的某些CSS，例如“新闻纸”，则可以创建newsprint.user.css并附加所需的CSS。我们不建议您直接修改主题文件的原因如下： 安装Typora后可用的默认主题可能会在您更新Typora时同时更新。默认主题的更新逻辑只是：新版本的主题文件替换主题文件夹下的现有主题文件，因此如果将Typora更新为默认CSS文件，则修改后的修改可能会消失。 其他人开发的主题也可能在未来发生变化。如果他们更改了他们的CSS文件，您可以用旧文件替换他们的新文件，而不必担心。如果将它们放在其他文件（{current-theme}.user.css）中，您的修改将会消失。 但是如果你使用自己的CSS主题，那么直接修改它也行。 注意： {current-theme}.user.css中的{current-theme}应该（区分大小写）与当前主题的文件名部分相同。例如，“GitHub”主题的CSS文件是github.css，因此文件名部分是“github”而不是“Github”。 调试CSS 您可以打开Chrome / Safari DevTools来调试元素样式。 在macOS上，您可以打开Safari，并从Develop- &gt; your devide name- &gt; Typora- &gt; Typora菜单项打开DevTools 。 在Windows / Linux上，您可以从View- &gt; Toggle DevTools菜单项打开DevTools 。 打开Sublime（macOS）md 感谢Asoul，他创建了一个sublime插件，允许用户在macOS上从Sublime 2/3打开Typora中的当前文件。 截图 安装说明 包安装程序 安装Sublime Package Control 从命令选项板中选择“包控制：安装包”（super+shift+p） 找到“Typora.app Markdown”并选择 用法 选择的视图包含您要在标记中预览的文件： 命令调色板： 从命令选项板中选择“Markdown：使用Typora.app打开”（super+shift+p） 菜单： 选择工具→使用Typora打开 控制TOC层级 关于在哪里放置这些CSS，请按照添加自定义CSS。 在Typora [TOC]中将生成“目录”，默认情况下它将显示h1~h6的标题。 例如，要隐藏低级标题h6，您可以附加CSS： 123.md-toc-h6 &#123; display: none;&#125; 在对焦模式下更改样式 启用聚焦模式时，&lt;body&gt;dom将具有类on-focus-mode，聚焦块级元素将具有类md-focus。 可以包含md-focus类的块是不能包含子块的块，并且将包含一个md-end-block类。例如，&lt;blockquote&gt;可以包含子块&lt;p&gt;，因此它没有md-end-block类，而h1具有该类。md-focus-containerclass将适用于li包含.md-focus块的类。 所以我们可以在焦点模式下改变样式，如： 123456789101112131415161718192021222324252627282930313233343536373839404142434445/*Following are LESS code for better css structure*/.on-focus-mode &#123; /* under focus mode*/ .md-end-block:not(.md-focus):not(.md-focus-container) &#123; * &#123; /* use color close to background for un-focused block */ color: #C8C8C8 !important; &#125; img&#123; /* make img and element less attractive */ opacity: 50%; &#125; &#125; .task-list-item:not(.md-focus-container)&gt;input &#123; /* make the check mark on task list less attractive*/ opacity: 50%; &#125; .md-fences.md-focus .CodeMirror-code&gt;*:not(.CodeMirror-activeline) *, .CodeMirror.cm-s-inner:not(.CodeMirror-focused) * &#123; /*lines in unfocused code fences, and unfocused lines in focused code fence*/ color: #C8C8C8 !important; &#125; li[cid]:not(.md-focus-container) &#123; color: #C8C8C8 !important; &#125; #typora-source .CodeMirror-code&gt;*:not(.CodeMirror-activeline) * &#123; /*source code mode under focus mode*/ color: #C8C8C8 !important; &#125; .md-focus, .md-focus-container &#123; /* for text in current focused block */ color: #111; &#125; &#125; 添加搜索服务 用户可以添加自定义搜索引擎以扩展上下文菜单中显示的功能。 切片2 苹果系统 在大多数应用程序的上下文菜单中，系统范围内更改可用搜索引擎。你会在这里找到设置： Snip20160815_11 Windows （需要Typora≥v0.9.16） 在Typora中打开Menu→ Preference，然后单击“打开高级设置”。 sshot-1 从打开的“文件浏览” 打开并编辑conf.user.json。如果没有这样的文件，请创建一个。 修改或设置以下配置到conf.user.json文件中，%s将代表所选文本。例如： 12345&quot;searchService&quot;: [ [&quot;Search with Google&quot;, &quot;https://google.com/search?q=%s&quot;], [&quot;Translate&quot;, &quot;http://translate.google.com/?source=osdd#auto|auto|%s&quot;] [&quot;Search with Wikipedia&quot;, &quot;https://en.wikipedia.org/wiki/Special:Search/%s&quot;] ] 注意：默认配置是： 123&quot;searchService&quot;: [ [&quot;Search with Google&quot;, &quot;https://google.com/search?q=%s&quot;], ] 重启Typora，选项searchService将在上下文菜单中提供。 Shell或Cmd中使用 苹果系统 您可以使用open -a typora xxx.md在Typora中打开目标markdown。如果Typora是.md文件的默认编辑器，那么open xxx.md就足够了。 你也可以添加 1alias typora=&quot;open -a typora&quot; 在您的 .bash_profile 或其他配置文件中，您可以 typora xxx.md直接从shell /终端打开markdown文件。 Windows 如果将Typora设置为默认的markdown编辑器，则在cmd.exe中，.md直接输入文件路径将打开目标markdown文件。例如：.\example.md或start example.md 要将Typora设置为默认的markdown编辑器，您必须执行以下操作： 选择一个markdown文件 打开上下文菜单并选择 单击Properties，然后单击Change buttong，如图1所示 打开 - &gt;选择其他应用程序，如图2所示 在“您想如何打开此文件 ”中选择Typora或Typora Launcher ？并设置选中“ 始终使用此应用程序”以打开.md文件。 图1 - 文件属性窗口 图2 - 应用程序选择器窗口 Linux的 在Linux上安装Typora后，用户可以typora直接在终端中运行，例如： 1typora ~/Document/test.md 调整图像大小 图片 Typora允许使用&lt;img&gt;标签显示图像，也可用于调整图像的大小。 例如，您可以指定标记的属性width或height属性&lt;img&gt;，或在其style属性中设置宽度/高度： 12345&lt;img src=&quot;https://www.google.com/doodles/kamma-rahbeks-241st-birthday&quot; width=&quot;200px&quot; /&gt;&lt;!--or--&gt;&lt;img src=&quot;https://www.google.com/doodles/kamma-rahbeks-241st-birthday&quot; style=&quot;height:200px&quot; /&gt; 另一个常见的用例是，当您尝试插入视网膜图像，并希望将其缩放为“正确”大小时，您可以zoom在其style属性中指定一个因子。 1&lt;img src=&quot;https://www.google.com/doodles/kamma-rahbeks-241st-birthday&quot; style=&quot;zoom:50%&quot; /&gt; Typora可以理解和显示上述语法。虽然您可以在其style属性中设置其他css属性，但在Typora编辑或预览时会忽略它们，但可能会影响导出的HTML或PDF。 自动保存 macOS（Typora≥0.9.9.8.2） 在macOS上，操作系统将为基于文档的应用程序（如Typora或TextEdit）安排自动保存操作。因此，“自动保存”始终作为系统功能启用。 一般 如果您希望Typora在退出或关闭时自动保存内容，而不弹出确认对话框，请取消选中复选框。 如果您希望Typora在重新启动时恢复所有窗口/文档，请取消选中复选框二。 Windows / Linux（Typora≥0.9.21） Snip20161027_2 您可以在首选项面板上启用此功能。 默认情况下，文档将每5分钟保存一次。 如果要更改时间间隔，请单击首选项面板上的“打开高级设置”按钮，这将弹出一个名为的文件夹conf，然后编辑或创建一个名为的文件conf.user.json，并修改/添加以下设置： 123&#123; &quot;autoSaveTimer&quot;: 5 // Double, default is 5. The unit is &quot;minute&quot;&#125; 恢复未保存的草稿（Windows / Linux） 无论是否启用“自动保存”选项，如果Typora退出或崩溃而未保存文件，或者您不小心保存了自己的文字，可以单击“恢复未保存的草稿”按钮以找到一些自动由Typora保存写入的草稿。 这些备份草稿的文件名就像是{date}-{filename}.md，如果您的内容是新创建的，没有文件路径（即“无标题”），则该{filename}部分是自动生成的，通常是第一个标题或第一个句子。您可以找到并复制相应的备份文件以检索您的部分文章。 版本控制和恢复 苹果系统 在macOS上，Typora与操作系统支持的本机版本控制功能集成。 你可以简单地选择File&gt; Revert To&gt; Browse All Versions从主菜单浏览和回复到某个版本。更多细节可以在这里找到。 Snip20170228_6 在Windows / Linux的 Windows 10还具有系统级别的版本控制支持（参考）。 在Window / Linux上的Typora不提供版本控制功能，但可以及时保存草稿以防止数据丢失，当Typora退出或崩溃而不保存文件，或者您意外地完成Typora而不保存您的文字。 您可以打开首选项面板，在“编辑器”部分下，单击“恢复未保存的草稿”按钮，找到由Typora自动保存的一些书写草稿。 Snip20170228_7 这些备份草稿的文件名就像是{date}-{filename}.md，如果您的内容是新创建的，没有文件路径（即“无标题”），则该{filename}部分是自动生成的，通常是第一个标题或第一个句子。您可以找到并复制相应的备份文件以检索您的部分文章。 另外，Typora for Window / Linux具有自动保存功能。 RTL（从右到左）支持（实验） 关于在哪里放置这些CSS，请按照添加自定义CSS。 这还没有经过全面测试，因为我不是RTL用户，如果发现任何错误，请向hi@typora.io报告 添加以下自定义CSS： 123#write &#123; direction: rtl;&#125; 任务列表 - 记录待办事项的简便方法 基本用法 键入以下标记，它们将呈现为任务列表。 12- [ ] This task is incomplete.- [x] This task is completed. 快速更改任务状态的方法 只需单击当前任务列表的复选框，或 - 选择Paragraph→ 下的菜单项Task Status，如果需要，请按照自定义键绑定指定快捷键。 “删除”已完成的任务 您可能希望像这样自动在已完成的任务上添加删除线 Snip20170824_1 这可以通过添加以下自定义CSS来实现： 1234567.task-list-done &#123; /* styles for completed tasks */ text-decoration: line-through;&#125;.task-list-not-done &#123; /* styles for incomplete tasks */&#125; 您还可以添加CSS以使完成的任务列表减少对比度，因此您可以添加类似于color: #777更改选择器的文本颜色的内容.task-list-done。 关于在哪里放置这些CSS，请按照添加自定义CSS。 自动配对 Snip20170824_4 正常自动配对 打开首选项面板，并启用“自动配对括号和引号”（上图中的第1项）以打开正常自动对，其行为与大多数代码编辑器相同。 自动配对扩展字符 如果启用了“自动对常见的markdown语法”，自动对行为也将被延长到markdown的符号，像*，~，\``，或者_，如果“hightlight”，“内联数学”，“上标”被启用，自动配对的=，$并且^`也将被打开。 请注意，对于~，=和^，结束对不会被自动插入，但是当你选择一个单词，并输入字符，如=，那么这个词将被包围=自动。 分页 自动分页 有时您可能希望导出为PDF，并在顶级标题上设置分页符。 打开themes文件夹，然后根据要包含的内容编辑css 12345678@media print &#123; h1 &#123; page-break-before: always; &#125; h1:first-of-type &#123; page-break-before: avoid; &#125;&#125; 现在导出时，将在每个h1元素之前创建一个新页面，第一个元素除外。 强制分页 要在文档上插入强制分页&lt;div style="page-break-after: always;"&gt;&lt;/div&gt;符，您可以在编写时尝试输入HTML 。 严格模式 你可以启用严格模式告诉Typora 更严格地遵循GFM的规范。如果希望解析器更具“容错能力”，可以禁用它。 严格的模式 在严格模式下，如果要输入标题，则必须在#字符后面加上空格（例如，·代表一个空格）： Markdown来源 严格模式结果 没有严格模式的结果 ###Header ###header header ###·Header header header 在严格模式下，如果要在列表项中创建新块/段落，则必须输入足够的空格缩进以使新段落与其前一段严格对齐，例如（·表示一个空格）： 严格模式 非严格模式 1.·aaa ··bbb // not in same list ``1.·aaa ···bbb // in same list ``10.·aaa ··1.·ccc // not a sub list ``10.·aaa ····1.·ccc // a sub list 1.·aaa ··bbb // in same list ``1.·aaa ···bbb // in same list ``10.·aaa ··1.·ccc // a sub list ``10.·aaa ··· 1.·ccc // a sub list 启用/禁用严格模式 可以在Preference Panel→ Markdown部分切换此选项。重新启动Typora后将应用该选项。 改变书写区域的宽度 下面的一些CSS样式适用于最新版本的Typora（在macOS上&gt; = 0.9.9.6，在Windows上&gt; = 0.9.13）。* 关于在哪里放置这些CSS，请按照添加自定义CSS。 CSS示例： 123#write &#123; max-width: 1800px; /*adjust writing area position*/&#125; 您还可以使用其他css样式padding-left或padding-right调整书写区域。 要更改源代码模式的宽度： 123#typora-source .CodeMirror-lines &#123; max-width: auto; /*or 1000px*/&#125; 使用Typora / Markdown中的链接 基本语法 超链接 123[Link Text](link-address)[Link Text](link-address &quot;optional title&quot;) http://对于这种类型的语法，不能忽略类似的协议。 参考链接 123[Link Text][Ref][Ref]: link-address &quot;optional title&quot; 或者，它可以缩短为 123[Ref][][Ref]: link-address http://对于这种类型的语法，不能忽略类似的协议。 自动链接 1&lt;http://typora.io&gt; 自动网址：Typora可以自动检测markdown中的网址链接，并将其呈现为网址链接，但请注意其他markdown引擎可能不支持此功能。 1This is a link: http://typora.io 对于指向网站的链接，我们建议您不要忽略像https://或http://之类的URL协议，或者在导出/发布之后它可能是Typora或其他markdown引擎的相关链接。 链接到本地文件 您可以使用写入相对或绝对路径作为本地文件的链接地址，可以省略类似（.md）的扩展名，例如： 1234567891011[Readme1](Readme1.md)[Readme2](../Docs/Readme2.markdown)[Readme3](Readme3)[Readme4](/User/root/Docs/Readme1.md)[Readme4](C:/Develop/Docs/Readme1.md)[Readme4](file:///User/root/Docs/Readme1.md) 请注意，对于相对链接地址，当根据Markdown规范导出为HTML时，它不会转换为真正的绝对文件路径。 内部链接 您可以使用#创建标记文件中任何标题的链接，例如： 12345678# This is a title.........A [link](#this-is-a-title) to jump towards target header 在Typora中打开链接 您可以在Typora中的链接上使用command+click（macOS）或ctrl+click（Linux / Windows）跳转到目标标题，或在Typora中打开它们，或在相关应用程序中打开它们。 常问问题 错误“无法打开位置/abc.com，您的意思是http://abc.com吗？”在我尝试打开链接时显示 如果要链接到本地文件abd.com，请确保路径正确。 如果要创建指向网站“abc.com”的链接，则需要使用URL方案或协议，例如使用[link](http://abc.com)。 有时，如果使用autolink（&lt;www.google.com&gt;）或auto URL（www.google.com），则可以省略协议，但是这会在不同的Markdown编辑器/引擎中规定变量，因此我们建议您不要在任何情况下忽略协议，以减少兼容性问题。 空白和换行 Typora中的推荐做法 在Markdown中，换行符令人困惑，我们的建议是： 使用Typora的默认设置。 用Typora的混合视图写。 按下Enter键插入新的段落，并避免插入新行。 如果确实需要单个硬换行符，请使用以下语法：&lt;br/&gt;。 单个换行 单个换行在不同的Markdown引擎中的解析方式不同，CommonMark只会忽略它，换句话说，如果你写： 12line 1line 2 它将呈现为 第1行第2行 但是其他markdown引擎可能会选择保留它（比如GitHub中的问题输入框），或提供是否保留它的选项。 在Typora中，我们提供了是否在首选项面板中保留它的选项，您可以选择快速从菜单栏写入时的行为。默认情况下，Typora将在编辑视图中保留换行符，并在打印或导出时忽略它们。您可以在首选项面板中更改此选项。 空白 连续空格类似于单个换行，大多数Markdown引擎会忽略它们，例如CommonMark， 1Four whietspace in between 将被转换为 1&lt;p&gt;Four whitespace in between&lt;/p&gt; 而你只会看到 中间有四个空格 默认情况下，Typora将在编辑视图中保留连续空格，并在打印或导出时忽略它们。您可以在首选项面板中更改此选项。 如果你想插入其他markdown引擎支持的连续空格，你可以 转义空白，在每个空格之前输入\ 使用HTML实体&amp;nbps;。 Typora中的Enter 键 在Markdown中，两个换行符意味着在Typora中创建一个新段落，当您按下Enter键时，会创建一个新段落，如果切换到源代码模式，则会插入两个换行符，例如， 第1段 第2段 是 123paragraph 1(empty line)paragraph 2 您可以通过按Shift+ Enter键在编辑视图中显式插入单个换行符。 markdown硬换行 Markdown提供了插入单个硬换行符的方法： 插入两个空格和一个换行符。 &lt;br/&gt;直接插入HTML标记。 几乎所有Markdown引擎都会将它们解析为输出中的硬换行符。 在Typora中更改相关设置 我们在菜单栏中提供相关设置Preference Panel或Edit- &gt; Whitespace and Line Breaks。 智能标点符号（SmartyPants） 注意：YAML / code / math块或源代码模式中都会忽略Smart Quotes和Smart Dashes。 智能引号 您可以从菜单栏或首选项面板中找到Smart Quotes选项。启用后，Typora将'和"转换向弯引号。例如，如果您输入： 1&quot;It&apos;s a &apos;word&apos; in a quoted sentence.&quot; 它会变成： 1“It’s a ‘word’ in a quoted sentence.” 在Windows / Linux版本中，您可以在“首选项”面板中找到更多引号对模式，例如“«abc»”等。 在MacOS版本，你可以设置在引号模式System Preferences→Keyboard→Text。如果更改，Typora将需要重新启动才能应用它。 智能破折号 您可以从菜单栏或首选项面板中找到Smart Dashes选项。启用后，Typora将--和---转换为–和—，...将被转换为…。 注意：在MacOS中，如果选择“输入转换”，--和---都将被转换成—，要输入-- 请alt+-`将其输入。这似乎是一个macOS规范，Typora也跟随macOS。 转义引号和破折号 您可以使用\"和\-转义引号和短划线以防止它们进行转换。 “转换输入”和“转换时转换” 这些选项控制标点符号的转换方式。 启用“ 在输入时转换”时，会在用户键入时立即转换引号和短划线，并且转换后的内容将保存在Markdown源代码中。例如，如果启用了智能破折号，并且在用户输入...之后，将进入…编辑/预览视图和源代码。用户可以通过undo操作取消不正确的转换。 启用“ 在渲染时转换”时，当用户输入ASCII引号和短划线时，原始ASCII将保存在源模式中，但在编辑/预览视图中，Typora会将它们渲染为弯引号或unicode破折号。 当用户在YAML /代码/数学块或源代码模式下输入时，两者都忽略转换。 在解析中重新映射Unicode标点符号 当智能破折号的“输入时转换上”启用后，如果用户输入&lt;!-- comment --&gt;将变成&lt;!— comments —&gt;，因为--被转换。 为了防止这种情况，Typora引入了这个选项。启用后，Typora会将markdown语法的unicode替代品重新映射为ASCII格式，例如： 输入 解析为 &lt;!— comments —&gt; &lt;!-- comment --&gt; ![link](link «title») 或 ![link](link “title”) ![link](link "title") — ---（水平线） 》 引用 &gt; 引用 ... 如果您的IME（输入法引擎）无法直接输入ASCII标点，这也会有所帮助。 当在输入时转换启用时，这个选项也将被自动启用。 文字替换 Typora并不支持进一步文本替换规则（例如：-&gt;至→，或(C)到©）。要做这个： 在MacOS，我们建议您设置System Preferences→Keyboard→Text。并在Typora的菜单中启用“文本替换”。然后Typora可以使用您的文本替换规则。 在Windows / Linux上，我们建议您使用第三方应用程序来配置文本替换。您可以从此列表中进行选择。 嵌入视频，媒体或网页内容 您可以使用&lt;HTML&gt;代码在Typora中嵌入视频/音频或远程Web内容。 目录 视频 音频 嵌入Web内容 PDF 视频 您可以嵌入这样的视频： 1&lt;video src="xxx.mp4" /&gt; 或者将视频文件拖放到Typora中，Typora会自动插入视频。 Video路径遵循与图像相同的规则。因此，选项“尽可能使用相对路径”和“图像根路径”也适用于&lt;video&gt;内容。 音频 与&lt;video&gt;相同，您可以使用&lt;audio&gt;标签来嵌入音频： 1&lt;audio src=&quot;xxx.mp3&quot; /&gt; 嵌入Web内容 有些网站允许您将其内容嵌入到其他网页中，其中大部分支持&lt;iframe&gt;，Typora也支持这些网页。您可以按照他们的“共享”页面/对话框，将他们的代码粘贴到Typora中，例如： 12&lt;iframe height='265' scrolling='no' title='Fancy Animated SVG Menu' src='//codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'&gt;See the Pen &lt;a href='https://codepen.io/jeangontijo/pen/OxVywj/'&gt;Fancy Animated SVG Menu&lt;/a&gt; by Jean Gontijo (&lt;a href='https://codepen.io/jeangontijo'&gt;@jeangontijo&lt;/a&gt;) on &lt;a href='https://codepen.io'&gt;CodePen&lt;/a&gt;.&lt;/iframe&gt; 这将成为 有些网站只提供基于Javascript的嵌入代码，而不是&lt;iframe&gt;剪辑，例如： 12&lt;blockquote class="twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;Sunsets don&amp;#39;t get much better than this one over &lt;a href="https://twitter.com/GrandTetonNPS?ref_src=twsrc%5Etfw"&gt;@GrandTetonNPS&lt;/a&gt;. &lt;a href="https://twitter.com/hashtag/nature?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#nature&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/sunset?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#sunset&lt;/a&gt; &lt;a href="http://t.co/YuKy2rcjyU"&gt;pic.twitter.com/YuKy2rcjyU&lt;/a&gt;&lt;/p&gt;&amp;mdash; US Department of the Interior (@Interior) &lt;a href="https://twitter.com/Interior/status/463440424141459456?ref_src=twsrc%5Etfw"&gt;May 5, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt; Typora仅支持一些基于脚本的共享代码，这些内容/脚本也将在沙箱iframe中运行，无法访问本地文件和写入内容。 我们可以考虑允许用户在将来的更新中为此类配置“ 白名单 ”。 PDF 目前只有macOS版本支持嵌入PDF文档： 1&lt;iframe src="https://pdfobject.com/pdf/sample-3pp.pdf" style="height=800px;" /&gt; 黑暗模式 MacOS Mojave推出了“Dark Mode”，Typora也完全支持它。你可以用它来： 在macOS Mojave中打开“黑暗模式” 在Typora中选择一个黑暗主题。 CleanShot 2018-10-23 at 00.52.51@2x 阅读有关主题的更多信息或在主题库中查找更多主题。 启动选项 启动typora时，您可以将默认操作设置为： 打开新文件 恢复上次关闭的文件夹 恢复上次关闭的文件和文件夹 打开自定义文件夹。 可以在首选项面板中设置此选项： img 字数 字数统计显示在状态栏（Windows / Linux）或标题栏上（悬停时为macOS）。Typora还会计算行数，字符和估计的阅读时间。您可以单击“字数”按钮，在弹出式面板中显示所有这些统计信息。 img 您可以通过选择字数统计面板中的相应项来更改默认计数单位。 选择一系列文本时，所选文本的字数或字符数将显示在字数统计按钮中。 字数不包括用于格式目的的markdown语法，例如list bullet（ - ），而字符数计算它们。 对于中文文本，一个汉字算一个字。 对焦模式和打字机模式 对焦模式 启用“对焦模式”时，Typora将淡出除当前行/块之外的其他内容。您可以从view菜单中打开/关闭“对焦模式” 。 同 Focus Mode 无 Focus Mode 打字机模式 打字机模式模仿机械打字机的行为 - 它滚动文章以在打字时保持当前插入符不变。 您可以从view菜单中打开/关闭打字机模式。 默认情况下，即使您通过鼠标单击更改选择，它也始终将插入符号保留在窗口中间。如果您只想在键入时使用固定滚动，则可以从preferences panel→ 禁用此行为Always keep caret in middle of screen\nwhen typewriter mode is enabled。 复制和粘贴 剪贴板如何工作 我们先来讨论剪贴板格式。剪贴板格式用于描述剪贴板上放置的数据类型。 当您在Typora中复制内容时，在大多数情况下，Typora会将所选内容转换为不同的格式，包括HTML，Rich Format（RTF），纯文本，并将它们同时存储在剪贴板中。然后，当您粘贴到不同的应用程序时，将根据目标应用程序的逻辑选择正确的格式。例如，如果您粘贴到Gmail中，则会粘贴HTML格式的内容，而如果您粘贴到源代码编辑器（如Sublime）中，则会粘贴纯文本格式的内容。因此，与大多数其他Markdown编辑器不同，Typora不会明确提供“以HTML格式复制”或“复制为RTF”等菜单操作，当您在Typora中复制时，这些格式已经被复制。 通常，您可以按下Command/Ctrl+Shift+V将内容作为纯文本（或“匹配样式”）粘贴到其他应用程序中。 同样，当您将内容粘贴到Typora时，首先，Typora在剪贴板中选择HTML格式并将其转换为Markdown。如果未找到HTML内容，typora会将内容粘贴为纯文本或Markdown源。在源代码模式下，始终选择纯文本格式。 粘贴为纯文本 “粘贴为纯文本”与Typora中的“粘贴为markdown源”具有相同的含义。您可以使用快捷键Command/Ctrl+Shift+V。 复制为Markdown 如果您复制的内容看起来像“ 男孩 ”并粘贴到纯文本编辑器，如Notepad.exe或VSCode， 默认情况下将粘贴“男孩”，而选择“复制为markdown”时将粘贴“男孩”。这个快捷键是Command/Ctrl+Shift+C。 默认复制行为 如果您与丰富的编辑器（如邮件客户端或Word）以及代码编辑器或IDE一起工作，您可能希望 - 在Typora中复制内容，然后： 粘贴到富编辑器时粘贴了丰富的内容 粘贴到代码编辑器时粘贴Markdown源代码 这在其他markdown编辑器中很难实现，但在Typora中完全可能。 要实现此目的，请打开首选项面板的“编辑器”选项卡/部分，然后为“默认复制行为”启用“将标记源复制为纯文本”。 在Typora中复制内容 粘贴到Gmail中（将粘贴具有丰富样式的内容） 粘贴到VSCode（将粘贴Markdown源代码） 没有主题样式的复制 默认情况下，从其他富文本编辑器复制内容将包括样式，包括字体，行高，颜色等。您可能只想复制具有基本格式或“语义文本”的内容。 例如，您可能希望复制&lt;strong&gt;text&lt;/strong&gt;，而不是具有在每个主题中定义的特定字体系列，字体大小，颜色...样式的“文本”，在这种情况下，“首选没有主题样式的复制”是首选。 复制没有主题样式并粘贴到页面 为了更好地在Typora和其他应用程序之间移动内容，请使用“导出”功能而不是复制和粘贴。 复制为HTML代码 当选择动作时，Typora会将所选部分转换为HTML，并将HMTL源代码放入剪贴板的“纯文本”格式。对于开发人员，您可能有机会在源代码编辑器中编辑HTML文件，此菜单操作可帮助您将Typora中的内容复制到HTML源代码中。 复制为HTML代码并粘贴到VSCode中 使用移动设备和其他设备 数据同步 Typora以Markdown格式存储文件，这只是纯文本。因此，您可以使用任何第三方同步工具（例如iCloud Drive，Google Drive，OneDrive，Dropbox等）跨设备同步这些文件。 移动支持 我们目前专注于Typora的桌面版本，因此不久将不会有Typora的移动版本。 要在Mobile上编辑文件，您可以选择支持iCould Drive或其他第三个云同步/存储工具的任何Markdown编辑器，例如 Pretext MWeb 1Writer ByWord iA Writer Editorial ...或在App Store或Google Play中搜索“Markdown”。]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>示例</tag>
        <tag>入门指南</tag>
        <tag>Typora</tag>
        <tag>Markdown</tag>
        <tag>安装</tag>
        <tag>配置</tag>
        <tag>HTML</tag>
        <tag>Git</tag>
        <tag>CSS</tag>
        <tag>Javascript</tag>
      </tags>
  </entry>
</search>
